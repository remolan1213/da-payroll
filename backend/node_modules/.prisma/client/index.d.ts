
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model Leave
 * 
 */
export type Leave = $Result.DefaultSelection<Prisma.$LeavePayload>
/**
 * Model Payroll
 * 
 */
export type Payroll = $Result.DefaultSelection<Prisma.$PayrollPayload>
/**
 * Model PayrollAmount
 * 
 */
export type PayrollAmount = $Result.DefaultSelection<Prisma.$PayrollAmountPayload>
/**
 * Model PayrollTemp
 * 
 */
export type PayrollTemp = $Result.DefaultSelection<Prisma.$PayrollTempPayload>
/**
 * Model PayrollAmountTemp
 * 
 */
export type PayrollAmountTemp = $Result.DefaultSelection<Prisma.$PayrollAmountTempPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Companies
 * const companies = await prisma.company.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Companies
   * const companies = await prisma.company.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs>;

  /**
   * `prisma.leave`: Exposes CRUD operations for the **Leave** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leaves
    * const leaves = await prisma.leave.findMany()
    * ```
    */
  get leave(): Prisma.LeaveDelegate<ExtArgs>;

  /**
   * `prisma.payroll`: Exposes CRUD operations for the **Payroll** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payrolls
    * const payrolls = await prisma.payroll.findMany()
    * ```
    */
  get payroll(): Prisma.PayrollDelegate<ExtArgs>;

  /**
   * `prisma.payrollAmount`: Exposes CRUD operations for the **PayrollAmount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayrollAmounts
    * const payrollAmounts = await prisma.payrollAmount.findMany()
    * ```
    */
  get payrollAmount(): Prisma.PayrollAmountDelegate<ExtArgs>;

  /**
   * `prisma.payrollTemp`: Exposes CRUD operations for the **PayrollTemp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayrollTemps
    * const payrollTemps = await prisma.payrollTemp.findMany()
    * ```
    */
  get payrollTemp(): Prisma.PayrollTempDelegate<ExtArgs>;

  /**
   * `prisma.payrollAmountTemp`: Exposes CRUD operations for the **PayrollAmountTemp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayrollAmountTemps
    * const payrollAmountTemps = await prisma.payrollAmountTemp.findMany()
    * ```
    */
  get payrollAmountTemp(): Prisma.PayrollAmountTempDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Company: 'Company',
    Department: 'Department',
    Employee: 'Employee',
    Leave: 'Leave',
    Payroll: 'Payroll',
    PayrollAmount: 'PayrollAmount',
    PayrollTemp: 'PayrollTemp',
    PayrollAmountTemp: 'PayrollAmountTemp'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'company' | 'department' | 'employee' | 'leave' | 'payroll' | 'payrollAmount' | 'payrollTemp' | 'payrollAmountTemp'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>,
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>,
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>,
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      Leave: {
        payload: Prisma.$LeavePayload<ExtArgs>
        fields: Prisma.LeaveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaveFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeavePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaveFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          findFirst: {
            args: Prisma.LeaveFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeavePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaveFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          findMany: {
            args: Prisma.LeaveFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>[]
          }
          create: {
            args: Prisma.LeaveCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          createMany: {
            args: Prisma.LeaveCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LeaveDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          update: {
            args: Prisma.LeaveUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          deleteMany: {
            args: Prisma.LeaveDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LeaveUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LeaveUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          aggregate: {
            args: Prisma.LeaveAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLeave>
          }
          groupBy: {
            args: Prisma.LeaveGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LeaveGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaveCountArgs<ExtArgs>,
            result: $Utils.Optional<LeaveCountAggregateOutputType> | number
          }
        }
      }
      Payroll: {
        payload: Prisma.$PayrollPayload<ExtArgs>
        fields: Prisma.PayrollFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayrollFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayrollFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>
          }
          findFirst: {
            args: Prisma.PayrollFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayrollFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>
          }
          findMany: {
            args: Prisma.PayrollFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>[]
          }
          create: {
            args: Prisma.PayrollCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>
          }
          createMany: {
            args: Prisma.PayrollCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PayrollDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>
          }
          update: {
            args: Prisma.PayrollUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>
          }
          deleteMany: {
            args: Prisma.PayrollDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PayrollUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PayrollUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollPayload>
          }
          aggregate: {
            args: Prisma.PayrollAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayroll>
          }
          groupBy: {
            args: Prisma.PayrollGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PayrollGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayrollCountArgs<ExtArgs>,
            result: $Utils.Optional<PayrollCountAggregateOutputType> | number
          }
        }
      }
      PayrollAmount: {
        payload: Prisma.$PayrollAmountPayload<ExtArgs>
        fields: Prisma.PayrollAmountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayrollAmountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayrollAmountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountPayload>
          }
          findFirst: {
            args: Prisma.PayrollAmountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayrollAmountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountPayload>
          }
          findMany: {
            args: Prisma.PayrollAmountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountPayload>[]
          }
          create: {
            args: Prisma.PayrollAmountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountPayload>
          }
          createMany: {
            args: Prisma.PayrollAmountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PayrollAmountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountPayload>
          }
          update: {
            args: Prisma.PayrollAmountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountPayload>
          }
          deleteMany: {
            args: Prisma.PayrollAmountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PayrollAmountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PayrollAmountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountPayload>
          }
          aggregate: {
            args: Prisma.PayrollAmountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayrollAmount>
          }
          groupBy: {
            args: Prisma.PayrollAmountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PayrollAmountGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayrollAmountCountArgs<ExtArgs>,
            result: $Utils.Optional<PayrollAmountCountAggregateOutputType> | number
          }
        }
      }
      PayrollTemp: {
        payload: Prisma.$PayrollTempPayload<ExtArgs>
        fields: Prisma.PayrollTempFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayrollTempFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollTempPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayrollTempFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollTempPayload>
          }
          findFirst: {
            args: Prisma.PayrollTempFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollTempPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayrollTempFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollTempPayload>
          }
          findMany: {
            args: Prisma.PayrollTempFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollTempPayload>[]
          }
          create: {
            args: Prisma.PayrollTempCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollTempPayload>
          }
          createMany: {
            args: Prisma.PayrollTempCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PayrollTempDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollTempPayload>
          }
          update: {
            args: Prisma.PayrollTempUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollTempPayload>
          }
          deleteMany: {
            args: Prisma.PayrollTempDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PayrollTempUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PayrollTempUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollTempPayload>
          }
          aggregate: {
            args: Prisma.PayrollTempAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayrollTemp>
          }
          groupBy: {
            args: Prisma.PayrollTempGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PayrollTempGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayrollTempCountArgs<ExtArgs>,
            result: $Utils.Optional<PayrollTempCountAggregateOutputType> | number
          }
        }
      }
      PayrollAmountTemp: {
        payload: Prisma.$PayrollAmountTempPayload<ExtArgs>
        fields: Prisma.PayrollAmountTempFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayrollAmountTempFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountTempPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayrollAmountTempFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountTempPayload>
          }
          findFirst: {
            args: Prisma.PayrollAmountTempFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountTempPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayrollAmountTempFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountTempPayload>
          }
          findMany: {
            args: Prisma.PayrollAmountTempFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountTempPayload>[]
          }
          create: {
            args: Prisma.PayrollAmountTempCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountTempPayload>
          }
          createMany: {
            args: Prisma.PayrollAmountTempCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PayrollAmountTempDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountTempPayload>
          }
          update: {
            args: Prisma.PayrollAmountTempUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountTempPayload>
          }
          deleteMany: {
            args: Prisma.PayrollAmountTempDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PayrollAmountTempUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PayrollAmountTempUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PayrollAmountTempPayload>
          }
          aggregate: {
            args: Prisma.PayrollAmountTempAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayrollAmountTemp>
          }
          groupBy: {
            args: Prisma.PayrollAmountTempGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PayrollAmountTempGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayrollAmountTempCountArgs<ExtArgs>,
            result: $Utils.Optional<PayrollAmountTempCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    departments: number
    employees: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departments?: boolean | CompanyCountOutputTypeCountDepartmentsArgs
    employees?: boolean | CompanyCountOutputTypeCountEmployeesArgs
  }

  // Custom InputTypes

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }



  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    leaves: number
    payrolls: number
    payroll_temps: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaves?: boolean | EmployeeCountOutputTypeCountLeavesArgs
    payrolls?: boolean | EmployeeCountOutputTypeCountPayrollsArgs
    payroll_temps?: boolean | EmployeeCountOutputTypeCountPayroll_tempsArgs
  }

  // Custom InputTypes

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountLeavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveWhereInput
  }


  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountPayrollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollWhereInput
  }


  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountPayroll_tempsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollTempWhereInput
  }



  /**
   * Count Type PayrollCountOutputType
   */

  export type PayrollCountOutputType = {
    payamounts: number
  }

  export type PayrollCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payamounts?: boolean | PayrollCountOutputTypeCountPayamountsArgs
  }

  // Custom InputTypes

  /**
   * PayrollCountOutputType without action
   */
  export type PayrollCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollCountOutputType
     */
    select?: PayrollCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PayrollCountOutputType without action
   */
  export type PayrollCountOutputTypeCountPayamountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollAmountWhereInput
  }



  /**
   * Count Type PayrollTempCountOutputType
   */

  export type PayrollTempCountOutputType = {
    payamounts: number
  }

  export type PayrollTempCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payamounts?: boolean | PayrollTempCountOutputTypeCountPayamountsArgs
  }

  // Custom InputTypes

  /**
   * PayrollTempCountOutputType without action
   */
  export type PayrollTempCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollTempCountOutputType
     */
    select?: PayrollTempCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PayrollTempCountOutputType without action
   */
  export type PayrollTempCountOutputTypeCountPayamountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollAmountTempWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    company_id: number | null
  }

  export type CompanySumAggregateOutputType = {
    company_id: number | null
  }

  export type CompanyMinAggregateOutputType = {
    company_id: number | null
    company_name: string | null
  }

  export type CompanyMaxAggregateOutputType = {
    company_id: number | null
    company_name: string | null
  }

  export type CompanyCountAggregateOutputType = {
    company_id: number
    company_name: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    company_id?: true
  }

  export type CompanySumAggregateInputType = {
    company_id?: true
  }

  export type CompanyMinAggregateInputType = {
    company_id?: true
    company_name?: true
  }

  export type CompanyMaxAggregateInputType = {
    company_id?: true
    company_name?: true
  }

  export type CompanyCountAggregateInputType = {
    company_id?: true
    company_name?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    company_id: number
    company_name: string
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    company_id?: boolean
    company_name?: boolean
    departments?: boolean | Company$departmentsArgs<ExtArgs>
    employees?: boolean | Company$employeesArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    company_id?: boolean
    company_name?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departments?: boolean | Company$departmentsArgs<ExtArgs>
    employees?: boolean | Company$employeesArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      departments: Prisma.$DepartmentPayload<ExtArgs>[]
      employees: Prisma.$EmployeePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      company_id: number
      company_name: string
    }, ExtArgs["result"]["company"]>
    composites: {}
  }


  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompanyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompanyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `company_id`
     * const companyWithCompany_idOnly = await prisma.company.findMany({ select: { company_id: true } })
     * 
    **/
    findMany<T extends CompanyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
    **/
    create<T extends CompanyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Companies.
     *     @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     *     @example
     *     // Create many Companies
     *     const company = await prisma.company.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompanyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
    **/
    delete<T extends CompanyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompanyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompanyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompanyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
    **/
    upsert<T extends CompanyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    departments<T extends Company$departmentsArgs<ExtArgs> = {}>(args?: Subset<T, Company$departmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    employees<T extends Company$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Company$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly company_id: FieldRef<"Company", 'Int'>
    readonly company_name: FieldRef<"Company", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }


  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
  }


  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }


  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }


  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }


  /**
   * Company.departments
   */
  export type Company$departmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * Company.employees
   */
  export type Company$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }


  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
  }



  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    department_id: number | null
    company_id: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    department_id: number | null
    company_id: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    department_id: number | null
    department_name: string | null
    company_id: number | null
  }

  export type DepartmentMaxAggregateOutputType = {
    department_id: number | null
    department_name: string | null
    company_id: number | null
  }

  export type DepartmentCountAggregateOutputType = {
    department_id: number
    department_name: number
    company_id: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    department_id?: true
    company_id?: true
  }

  export type DepartmentSumAggregateInputType = {
    department_id?: true
    company_id?: true
  }

  export type DepartmentMinAggregateInputType = {
    department_id?: true
    department_name?: true
    company_id?: true
  }

  export type DepartmentMaxAggregateInputType = {
    department_id?: true
    department_name?: true
    company_id?: true
  }

  export type DepartmentCountAggregateInputType = {
    department_id?: true
    department_name?: true
    company_id?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    department_id: number
    department_name: string
    company_id: number
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    department_id?: boolean
    department_name?: boolean
    company_id?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    department_id?: boolean
    department_name?: boolean
    company_id?: boolean
  }

  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }


  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      department_id: number
      department_name: string
      company_id: number
    }, ExtArgs["result"]["department"]>
    composites: {}
  }


  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DepartmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Department that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DepartmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `department_id`
     * const departmentWithDepartment_idOnly = await prisma.department.findMany({ select: { department_id: true } })
     * 
    **/
    findMany<T extends DepartmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
    **/
    create<T extends DepartmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Departments.
     *     @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     *     @example
     *     // Create many Departments
     *     const department = await prisma.department.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DepartmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
    **/
    delete<T extends DepartmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DepartmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DepartmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DepartmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
    **/
    upsert<T extends DepartmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Department model
   */ 
  interface DepartmentFieldRefs {
    readonly department_id: FieldRef<"Department", 'Int'>
    readonly department_name: FieldRef<"Department", 'String'>
    readonly company_id: FieldRef<"Department", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }


  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
  }


  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
  }


  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }


  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
  }


  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
  }



  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    company_id: number | null
    wage_rate: number | null
  }

  export type EmployeeSumAggregateOutputType = {
    company_id: number | null
    wage_rate: number | null
  }

  export type EmployeeMinAggregateOutputType = {
    employee_id: string | null
    lastName: string | null
    firstName: string | null
    middleName: string | null
    company_id: number | null
    start_train_date: Date | null
    start_income_date: Date | null
    start_10k_date: Date | null
    worker_type: string | null
    wage_rate: number | null
    rate_type: string | null
  }

  export type EmployeeMaxAggregateOutputType = {
    employee_id: string | null
    lastName: string | null
    firstName: string | null
    middleName: string | null
    company_id: number | null
    start_train_date: Date | null
    start_income_date: Date | null
    start_10k_date: Date | null
    worker_type: string | null
    wage_rate: number | null
    rate_type: string | null
  }

  export type EmployeeCountAggregateOutputType = {
    employee_id: number
    lastName: number
    firstName: number
    middleName: number
    company_id: number
    start_train_date: number
    start_income_date: number
    start_10k_date: number
    worker_type: number
    wage_rate: number
    rate_type: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    company_id?: true
    wage_rate?: true
  }

  export type EmployeeSumAggregateInputType = {
    company_id?: true
    wage_rate?: true
  }

  export type EmployeeMinAggregateInputType = {
    employee_id?: true
    lastName?: true
    firstName?: true
    middleName?: true
    company_id?: true
    start_train_date?: true
    start_income_date?: true
    start_10k_date?: true
    worker_type?: true
    wage_rate?: true
    rate_type?: true
  }

  export type EmployeeMaxAggregateInputType = {
    employee_id?: true
    lastName?: true
    firstName?: true
    middleName?: true
    company_id?: true
    start_train_date?: true
    start_income_date?: true
    start_10k_date?: true
    worker_type?: true
    wage_rate?: true
    rate_type?: true
  }

  export type EmployeeCountAggregateInputType = {
    employee_id?: true
    lastName?: true
    firstName?: true
    middleName?: true
    company_id?: true
    start_train_date?: true
    start_income_date?: true
    start_10k_date?: true
    worker_type?: true
    wage_rate?: true
    rate_type?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    employee_id: string
    lastName: string
    firstName: string
    middleName: string | null
    company_id: number | null
    start_train_date: Date
    start_income_date: Date
    start_10k_date: Date
    worker_type: string
    wage_rate: number
    rate_type: string
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    employee_id?: boolean
    lastName?: boolean
    firstName?: boolean
    middleName?: boolean
    company_id?: boolean
    start_train_date?: boolean
    start_income_date?: boolean
    start_10k_date?: boolean
    worker_type?: boolean
    wage_rate?: boolean
    rate_type?: boolean
    company?: boolean | Employee$companyArgs<ExtArgs>
    leaves?: boolean | Employee$leavesArgs<ExtArgs>
    payrolls?: boolean | Employee$payrollsArgs<ExtArgs>
    payroll_temps?: boolean | Employee$payroll_tempsArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    employee_id?: boolean
    lastName?: boolean
    firstName?: boolean
    middleName?: boolean
    company_id?: boolean
    start_train_date?: boolean
    start_income_date?: boolean
    start_10k_date?: boolean
    worker_type?: boolean
    wage_rate?: boolean
    rate_type?: boolean
  }

  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | Employee$companyArgs<ExtArgs>
    leaves?: boolean | Employee$leavesArgs<ExtArgs>
    payrolls?: boolean | Employee$payrollsArgs<ExtArgs>
    payroll_temps?: boolean | Employee$payroll_tempsArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs> | null
      leaves: Prisma.$LeavePayload<ExtArgs>[]
      payrolls: Prisma.$PayrollPayload<ExtArgs>[]
      payroll_temps: Prisma.$PayrollTempPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      employee_id: string
      lastName: string
      firstName: string
      middleName: string | null
      company_id: number | null
      start_train_date: Date
      start_income_date: Date
      start_10k_date: Date
      worker_type: string
      wage_rate: number
      rate_type: string
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }


  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmployeeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Employee that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmployeeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `employee_id`
     * const employeeWithEmployee_idOnly = await prisma.employee.findMany({ select: { employee_id: true } })
     * 
    **/
    findMany<T extends EmployeeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
    **/
    create<T extends EmployeeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Employees.
     *     @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     *     @example
     *     // Create many Employees
     *     const employee = await prisma.employee.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmployeeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
    **/
    delete<T extends EmployeeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmployeeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmployeeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmployeeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
    **/
    upsert<T extends EmployeeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>
    ): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    company<T extends Employee$companyArgs<ExtArgs> = {}>(args?: Subset<T, Employee$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    leaves<T extends Employee$leavesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$leavesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, 'findMany'> | Null>;

    payrolls<T extends Employee$payrollsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$payrollsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, 'findMany'> | Null>;

    payroll_temps<T extends Employee$payroll_tempsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$payroll_tempsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollTempPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Employee model
   */ 
  interface EmployeeFieldRefs {
    readonly employee_id: FieldRef<"Employee", 'String'>
    readonly lastName: FieldRef<"Employee", 'String'>
    readonly firstName: FieldRef<"Employee", 'String'>
    readonly middleName: FieldRef<"Employee", 'String'>
    readonly company_id: FieldRef<"Employee", 'Int'>
    readonly start_train_date: FieldRef<"Employee", 'DateTime'>
    readonly start_income_date: FieldRef<"Employee", 'DateTime'>
    readonly start_10k_date: FieldRef<"Employee", 'DateTime'>
    readonly worker_type: FieldRef<"Employee", 'String'>
    readonly wage_rate: FieldRef<"Employee", 'Float'>
    readonly rate_type: FieldRef<"Employee", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }


  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }


  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }


  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }


  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
  }


  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
  }


  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }


  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }


  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
  }


  /**
   * Employee.company
   */
  export type Employee$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }


  /**
   * Employee.leaves
   */
  export type Employee$leavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LeaveInclude<ExtArgs> | null
    where?: LeaveWhereInput
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    cursor?: LeaveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveScalarFieldEnum | LeaveScalarFieldEnum[]
  }


  /**
   * Employee.payrolls
   */
  export type Employee$payrollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollInclude<ExtArgs> | null
    where?: PayrollWhereInput
    orderBy?: PayrollOrderByWithRelationInput | PayrollOrderByWithRelationInput[]
    cursor?: PayrollWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }


  /**
   * Employee.payroll_temps
   */
  export type Employee$payroll_tempsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollTemp
     */
    select?: PayrollTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollTempInclude<ExtArgs> | null
    where?: PayrollTempWhereInput
    orderBy?: PayrollTempOrderByWithRelationInput | PayrollTempOrderByWithRelationInput[]
    cursor?: PayrollTempWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayrollTempScalarFieldEnum | PayrollTempScalarFieldEnum[]
  }


  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EmployeeInclude<ExtArgs> | null
  }



  /**
   * Model Leave
   */

  export type AggregateLeave = {
    _count: LeaveCountAggregateOutputType | null
    _avg: LeaveAvgAggregateOutputType | null
    _sum: LeaveSumAggregateOutputType | null
    _min: LeaveMinAggregateOutputType | null
    _max: LeaveMaxAggregateOutputType | null
  }

  export type LeaveAvgAggregateOutputType = {
    leave_id: number | null
    total_days: number | null
  }

  export type LeaveSumAggregateOutputType = {
    leave_id: number | null
    total_days: number | null
  }

  export type LeaveMinAggregateOutputType = {
    leave_id: number | null
    employee_id: string | null
    start_leave: Date | null
    end_leave: Date | null
    total_days: number | null
  }

  export type LeaveMaxAggregateOutputType = {
    leave_id: number | null
    employee_id: string | null
    start_leave: Date | null
    end_leave: Date | null
    total_days: number | null
  }

  export type LeaveCountAggregateOutputType = {
    leave_id: number
    employee_id: number
    start_leave: number
    end_leave: number
    total_days: number
    _all: number
  }


  export type LeaveAvgAggregateInputType = {
    leave_id?: true
    total_days?: true
  }

  export type LeaveSumAggregateInputType = {
    leave_id?: true
    total_days?: true
  }

  export type LeaveMinAggregateInputType = {
    leave_id?: true
    employee_id?: true
    start_leave?: true
    end_leave?: true
    total_days?: true
  }

  export type LeaveMaxAggregateInputType = {
    leave_id?: true
    employee_id?: true
    start_leave?: true
    end_leave?: true
    total_days?: true
  }

  export type LeaveCountAggregateInputType = {
    leave_id?: true
    employee_id?: true
    start_leave?: true
    end_leave?: true
    total_days?: true
    _all?: true
  }

  export type LeaveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leave to aggregate.
     */
    where?: LeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leaves to fetch.
     */
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leaves
    **/
    _count?: true | LeaveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveMaxAggregateInputType
  }

  export type GetLeaveAggregateType<T extends LeaveAggregateArgs> = {
        [P in keyof T & keyof AggregateLeave]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeave[P]>
      : GetScalarType<T[P], AggregateLeave[P]>
  }




  export type LeaveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveWhereInput
    orderBy?: LeaveOrderByWithAggregationInput | LeaveOrderByWithAggregationInput[]
    by: LeaveScalarFieldEnum[] | LeaveScalarFieldEnum
    having?: LeaveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveCountAggregateInputType | true
    _avg?: LeaveAvgAggregateInputType
    _sum?: LeaveSumAggregateInputType
    _min?: LeaveMinAggregateInputType
    _max?: LeaveMaxAggregateInputType
  }

  export type LeaveGroupByOutputType = {
    leave_id: number
    employee_id: string
    start_leave: Date | null
    end_leave: Date | null
    total_days: number | null
    _count: LeaveCountAggregateOutputType | null
    _avg: LeaveAvgAggregateOutputType | null
    _sum: LeaveSumAggregateOutputType | null
    _min: LeaveMinAggregateOutputType | null
    _max: LeaveMaxAggregateOutputType | null
  }

  type GetLeaveGroupByPayload<T extends LeaveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveGroupByOutputType[P]>
        }
      >
    >


  export type LeaveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    leave_id?: boolean
    employee_id?: boolean
    start_leave?: boolean
    end_leave?: boolean
    total_days?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leave"]>

  export type LeaveSelectScalar = {
    leave_id?: boolean
    employee_id?: boolean
    start_leave?: boolean
    end_leave?: boolean
    total_days?: boolean
  }

  export type LeaveInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }


  export type $LeavePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Leave"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      leave_id: number
      employee_id: string
      start_leave: Date | null
      end_leave: Date | null
      total_days: number | null
    }, ExtArgs["result"]["leave"]>
    composites: {}
  }


  type LeaveGetPayload<S extends boolean | null | undefined | LeaveDefaultArgs> = $Result.GetResult<Prisma.$LeavePayload, S>

  type LeaveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeaveFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeaveCountAggregateInputType | true
    }

  export interface LeaveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Leave'], meta: { name: 'Leave' } }
    /**
     * Find zero or one Leave that matches the filter.
     * @param {LeaveFindUniqueArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LeaveFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LeaveFindUniqueArgs<ExtArgs>>
    ): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Leave that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LeaveFindUniqueOrThrowArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LeaveFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LeaveFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Leave that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveFindFirstArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LeaveFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LeaveFindFirstArgs<ExtArgs>>
    ): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Leave that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveFindFirstOrThrowArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LeaveFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LeaveFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Leaves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leaves
     * const leaves = await prisma.leave.findMany()
     * 
     * // Get first 10 Leaves
     * const leaves = await prisma.leave.findMany({ take: 10 })
     * 
     * // Only select the `leave_id`
     * const leaveWithLeave_idOnly = await prisma.leave.findMany({ select: { leave_id: true } })
     * 
    **/
    findMany<T extends LeaveFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LeaveFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Leave.
     * @param {LeaveCreateArgs} args - Arguments to create a Leave.
     * @example
     * // Create one Leave
     * const Leave = await prisma.leave.create({
     *   data: {
     *     // ... data to create a Leave
     *   }
     * })
     * 
    **/
    create<T extends LeaveCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LeaveCreateArgs<ExtArgs>>
    ): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Leaves.
     *     @param {LeaveCreateManyArgs} args - Arguments to create many Leaves.
     *     @example
     *     // Create many Leaves
     *     const leave = await prisma.leave.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LeaveCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LeaveCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Leave.
     * @param {LeaveDeleteArgs} args - Arguments to delete one Leave.
     * @example
     * // Delete one Leave
     * const Leave = await prisma.leave.delete({
     *   where: {
     *     // ... filter to delete one Leave
     *   }
     * })
     * 
    **/
    delete<T extends LeaveDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LeaveDeleteArgs<ExtArgs>>
    ): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Leave.
     * @param {LeaveUpdateArgs} args - Arguments to update one Leave.
     * @example
     * // Update one Leave
     * const leave = await prisma.leave.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LeaveUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LeaveUpdateArgs<ExtArgs>>
    ): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Leaves.
     * @param {LeaveDeleteManyArgs} args - Arguments to filter Leaves to delete.
     * @example
     * // Delete a few Leaves
     * const { count } = await prisma.leave.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LeaveDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LeaveDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leaves
     * const leave = await prisma.leave.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LeaveUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LeaveUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Leave.
     * @param {LeaveUpsertArgs} args - Arguments to update or create a Leave.
     * @example
     * // Update or create a Leave
     * const leave = await prisma.leave.upsert({
     *   create: {
     *     // ... data to create a Leave
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Leave we want to update
     *   }
     * })
    **/
    upsert<T extends LeaveUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LeaveUpsertArgs<ExtArgs>>
    ): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Leaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveCountArgs} args - Arguments to filter Leaves to count.
     * @example
     * // Count the number of Leaves
     * const count = await prisma.leave.count({
     *   where: {
     *     // ... the filter for the Leaves we want to count
     *   }
     * })
    **/
    count<T extends LeaveCountArgs>(
      args?: Subset<T, LeaveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Leave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveAggregateArgs>(args: Subset<T, LeaveAggregateArgs>): Prisma.PrismaPromise<GetLeaveAggregateType<T>>

    /**
     * Group by Leave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaveGroupByArgs['orderBy'] }
        : { orderBy?: LeaveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Leave model
   */
  readonly fields: LeaveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Leave.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Leave model
   */ 
  interface LeaveFieldRefs {
    readonly leave_id: FieldRef<"Leave", 'Int'>
    readonly employee_id: FieldRef<"Leave", 'String'>
    readonly start_leave: FieldRef<"Leave", 'DateTime'>
    readonly end_leave: FieldRef<"Leave", 'DateTime'>
    readonly total_days: FieldRef<"Leave", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Leave findUnique
   */
  export type LeaveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leave to fetch.
     */
    where: LeaveWhereUniqueInput
  }


  /**
   * Leave findUniqueOrThrow
   */
  export type LeaveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leave to fetch.
     */
    where: LeaveWhereUniqueInput
  }


  /**
   * Leave findFirst
   */
  export type LeaveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leave to fetch.
     */
    where?: LeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leaves to fetch.
     */
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leaves.
     */
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leaves.
     */
    distinct?: LeaveScalarFieldEnum | LeaveScalarFieldEnum[]
  }


  /**
   * Leave findFirstOrThrow
   */
  export type LeaveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leave to fetch.
     */
    where?: LeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leaves to fetch.
     */
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leaves.
     */
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leaves.
     */
    distinct?: LeaveScalarFieldEnum | LeaveScalarFieldEnum[]
  }


  /**
   * Leave findMany
   */
  export type LeaveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leaves to fetch.
     */
    where?: LeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leaves to fetch.
     */
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leaves.
     */
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
     */
    skip?: number
    distinct?: LeaveScalarFieldEnum | LeaveScalarFieldEnum[]
  }


  /**
   * Leave create
   */
  export type LeaveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * The data needed to create a Leave.
     */
    data: XOR<LeaveCreateInput, LeaveUncheckedCreateInput>
  }


  /**
   * Leave createMany
   */
  export type LeaveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leaves.
     */
    data: LeaveCreateManyInput | LeaveCreateManyInput[]
  }


  /**
   * Leave update
   */
  export type LeaveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * The data needed to update a Leave.
     */
    data: XOR<LeaveUpdateInput, LeaveUncheckedUpdateInput>
    /**
     * Choose, which Leave to update.
     */
    where: LeaveWhereUniqueInput
  }


  /**
   * Leave updateMany
   */
  export type LeaveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leaves.
     */
    data: XOR<LeaveUpdateManyMutationInput, LeaveUncheckedUpdateManyInput>
    /**
     * Filter which Leaves to update
     */
    where?: LeaveWhereInput
  }


  /**
   * Leave upsert
   */
  export type LeaveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * The filter to search for the Leave to update in case it exists.
     */
    where: LeaveWhereUniqueInput
    /**
     * In case the Leave found by the `where` argument doesn't exist, create a new Leave with this data.
     */
    create: XOR<LeaveCreateInput, LeaveUncheckedCreateInput>
    /**
     * In case the Leave was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaveUpdateInput, LeaveUncheckedUpdateInput>
  }


  /**
   * Leave delete
   */
  export type LeaveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter which Leave to delete.
     */
    where: LeaveWhereUniqueInput
  }


  /**
   * Leave deleteMany
   */
  export type LeaveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leaves to delete
     */
    where?: LeaveWhereInput
  }


  /**
   * Leave without action
   */
  export type LeaveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LeaveInclude<ExtArgs> | null
  }



  /**
   * Model Payroll
   */

  export type AggregatePayroll = {
    _count: PayrollCountAggregateOutputType | null
    _avg: PayrollAvgAggregateOutputType | null
    _sum: PayrollSumAggregateOutputType | null
    _min: PayrollMinAggregateOutputType | null
    _max: PayrollMaxAggregateOutputType | null
  }

  export type PayrollAvgAggregateOutputType = {
    payroll_id: number | null
  }

  export type PayrollSumAggregateOutputType = {
    payroll_id: number | null
  }

  export type PayrollMinAggregateOutputType = {
    payroll_id: number | null
    employee_id: string | null
    payroll_range: Date | null
    payroll_date: Date | null
  }

  export type PayrollMaxAggregateOutputType = {
    payroll_id: number | null
    employee_id: string | null
    payroll_range: Date | null
    payroll_date: Date | null
  }

  export type PayrollCountAggregateOutputType = {
    payroll_id: number
    employee_id: number
    payroll_range: number
    payroll_date: number
    _all: number
  }


  export type PayrollAvgAggregateInputType = {
    payroll_id?: true
  }

  export type PayrollSumAggregateInputType = {
    payroll_id?: true
  }

  export type PayrollMinAggregateInputType = {
    payroll_id?: true
    employee_id?: true
    payroll_range?: true
    payroll_date?: true
  }

  export type PayrollMaxAggregateInputType = {
    payroll_id?: true
    employee_id?: true
    payroll_range?: true
    payroll_date?: true
  }

  export type PayrollCountAggregateInputType = {
    payroll_id?: true
    employee_id?: true
    payroll_range?: true
    payroll_date?: true
    _all?: true
  }

  export type PayrollAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payroll to aggregate.
     */
    where?: PayrollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payrolls to fetch.
     */
    orderBy?: PayrollOrderByWithRelationInput | PayrollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayrollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payrolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payrolls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payrolls
    **/
    _count?: true | PayrollCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayrollAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayrollSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollMaxAggregateInputType
  }

  export type GetPayrollAggregateType<T extends PayrollAggregateArgs> = {
        [P in keyof T & keyof AggregatePayroll]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayroll[P]>
      : GetScalarType<T[P], AggregatePayroll[P]>
  }




  export type PayrollGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollWhereInput
    orderBy?: PayrollOrderByWithAggregationInput | PayrollOrderByWithAggregationInput[]
    by: PayrollScalarFieldEnum[] | PayrollScalarFieldEnum
    having?: PayrollScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollCountAggregateInputType | true
    _avg?: PayrollAvgAggregateInputType
    _sum?: PayrollSumAggregateInputType
    _min?: PayrollMinAggregateInputType
    _max?: PayrollMaxAggregateInputType
  }

  export type PayrollGroupByOutputType = {
    payroll_id: number
    employee_id: string
    payroll_range: Date
    payroll_date: Date
    _count: PayrollCountAggregateOutputType | null
    _avg: PayrollAvgAggregateOutputType | null
    _sum: PayrollSumAggregateOutputType | null
    _min: PayrollMinAggregateOutputType | null
    _max: PayrollMaxAggregateOutputType | null
  }

  type GetPayrollGroupByPayload<T extends PayrollGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollGroupByOutputType[P]>
        }
      >
    >


  export type PayrollSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payroll_id?: boolean
    employee_id?: boolean
    payroll_range?: boolean
    payroll_date?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payamounts?: boolean | Payroll$payamountsArgs<ExtArgs>
    _count?: boolean | PayrollCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payroll"]>

  export type PayrollSelectScalar = {
    payroll_id?: boolean
    employee_id?: boolean
    payroll_range?: boolean
    payroll_date?: boolean
  }

  export type PayrollInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payamounts?: boolean | Payroll$payamountsArgs<ExtArgs>
    _count?: boolean | PayrollCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PayrollPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payroll"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      payamounts: Prisma.$PayrollAmountPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      payroll_id: number
      employee_id: string
      payroll_range: Date
      payroll_date: Date
    }, ExtArgs["result"]["payroll"]>
    composites: {}
  }


  type PayrollGetPayload<S extends boolean | null | undefined | PayrollDefaultArgs> = $Result.GetResult<Prisma.$PayrollPayload, S>

  type PayrollCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PayrollFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PayrollCountAggregateInputType | true
    }

  export interface PayrollDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payroll'], meta: { name: 'Payroll' } }
    /**
     * Find zero or one Payroll that matches the filter.
     * @param {PayrollFindUniqueArgs} args - Arguments to find a Payroll
     * @example
     * // Get one Payroll
     * const payroll = await prisma.payroll.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PayrollFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollFindUniqueArgs<ExtArgs>>
    ): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Payroll that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PayrollFindUniqueOrThrowArgs} args - Arguments to find a Payroll
     * @example
     * // Get one Payroll
     * const payroll = await prisma.payroll.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PayrollFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Payroll that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollFindFirstArgs} args - Arguments to find a Payroll
     * @example
     * // Get one Payroll
     * const payroll = await prisma.payroll.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PayrollFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollFindFirstArgs<ExtArgs>>
    ): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Payroll that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollFindFirstOrThrowArgs} args - Arguments to find a Payroll
     * @example
     * // Get one Payroll
     * const payroll = await prisma.payroll.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PayrollFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Payrolls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payrolls
     * const payrolls = await prisma.payroll.findMany()
     * 
     * // Get first 10 Payrolls
     * const payrolls = await prisma.payroll.findMany({ take: 10 })
     * 
     * // Only select the `payroll_id`
     * const payrollWithPayroll_idOnly = await prisma.payroll.findMany({ select: { payroll_id: true } })
     * 
    **/
    findMany<T extends PayrollFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Payroll.
     * @param {PayrollCreateArgs} args - Arguments to create a Payroll.
     * @example
     * // Create one Payroll
     * const Payroll = await prisma.payroll.create({
     *   data: {
     *     // ... data to create a Payroll
     *   }
     * })
     * 
    **/
    create<T extends PayrollCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollCreateArgs<ExtArgs>>
    ): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Payrolls.
     *     @param {PayrollCreateManyArgs} args - Arguments to create many Payrolls.
     *     @example
     *     // Create many Payrolls
     *     const payroll = await prisma.payroll.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PayrollCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payroll.
     * @param {PayrollDeleteArgs} args - Arguments to delete one Payroll.
     * @example
     * // Delete one Payroll
     * const Payroll = await prisma.payroll.delete({
     *   where: {
     *     // ... filter to delete one Payroll
     *   }
     * })
     * 
    **/
    delete<T extends PayrollDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollDeleteArgs<ExtArgs>>
    ): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Payroll.
     * @param {PayrollUpdateArgs} args - Arguments to update one Payroll.
     * @example
     * // Update one Payroll
     * const payroll = await prisma.payroll.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PayrollUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollUpdateArgs<ExtArgs>>
    ): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Payrolls.
     * @param {PayrollDeleteManyArgs} args - Arguments to filter Payrolls to delete.
     * @example
     * // Delete a few Payrolls
     * const { count } = await prisma.payroll.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PayrollDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payrolls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payrolls
     * const payroll = await prisma.payroll.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PayrollUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payroll.
     * @param {PayrollUpsertArgs} args - Arguments to update or create a Payroll.
     * @example
     * // Update or create a Payroll
     * const payroll = await prisma.payroll.upsert({
     *   create: {
     *     // ... data to create a Payroll
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payroll we want to update
     *   }
     * })
    **/
    upsert<T extends PayrollUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollUpsertArgs<ExtArgs>>
    ): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Payrolls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollCountArgs} args - Arguments to filter Payrolls to count.
     * @example
     * // Count the number of Payrolls
     * const count = await prisma.payroll.count({
     *   where: {
     *     // ... the filter for the Payrolls we want to count
     *   }
     * })
    **/
    count<T extends PayrollCountArgs>(
      args?: Subset<T, PayrollCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payroll.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollAggregateArgs>(args: Subset<T, PayrollAggregateArgs>): Prisma.PrismaPromise<GetPayrollAggregateType<T>>

    /**
     * Group by Payroll.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayrollGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayrollGroupByArgs['orderBy'] }
        : { orderBy?: PayrollGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayrollGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payroll model
   */
  readonly fields: PayrollFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payroll.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayrollClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    payamounts<T extends Payroll$payamountsArgs<ExtArgs> = {}>(args?: Subset<T, Payroll$payamountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollAmountPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Payroll model
   */ 
  interface PayrollFieldRefs {
    readonly payroll_id: FieldRef<"Payroll", 'Int'>
    readonly employee_id: FieldRef<"Payroll", 'String'>
    readonly payroll_range: FieldRef<"Payroll", 'DateTime'>
    readonly payroll_date: FieldRef<"Payroll", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Payroll findUnique
   */
  export type PayrollFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * Filter, which Payroll to fetch.
     */
    where: PayrollWhereUniqueInput
  }


  /**
   * Payroll findUniqueOrThrow
   */
  export type PayrollFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * Filter, which Payroll to fetch.
     */
    where: PayrollWhereUniqueInput
  }


  /**
   * Payroll findFirst
   */
  export type PayrollFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * Filter, which Payroll to fetch.
     */
    where?: PayrollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payrolls to fetch.
     */
    orderBy?: PayrollOrderByWithRelationInput | PayrollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payrolls.
     */
    cursor?: PayrollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payrolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payrolls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payrolls.
     */
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }


  /**
   * Payroll findFirstOrThrow
   */
  export type PayrollFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * Filter, which Payroll to fetch.
     */
    where?: PayrollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payrolls to fetch.
     */
    orderBy?: PayrollOrderByWithRelationInput | PayrollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payrolls.
     */
    cursor?: PayrollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payrolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payrolls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payrolls.
     */
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }


  /**
   * Payroll findMany
   */
  export type PayrollFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * Filter, which Payrolls to fetch.
     */
    where?: PayrollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payrolls to fetch.
     */
    orderBy?: PayrollOrderByWithRelationInput | PayrollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payrolls.
     */
    cursor?: PayrollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payrolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payrolls.
     */
    skip?: number
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }


  /**
   * Payroll create
   */
  export type PayrollCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * The data needed to create a Payroll.
     */
    data: XOR<PayrollCreateInput, PayrollUncheckedCreateInput>
  }


  /**
   * Payroll createMany
   */
  export type PayrollCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payrolls.
     */
    data: PayrollCreateManyInput | PayrollCreateManyInput[]
  }


  /**
   * Payroll update
   */
  export type PayrollUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * The data needed to update a Payroll.
     */
    data: XOR<PayrollUpdateInput, PayrollUncheckedUpdateInput>
    /**
     * Choose, which Payroll to update.
     */
    where: PayrollWhereUniqueInput
  }


  /**
   * Payroll updateMany
   */
  export type PayrollUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payrolls.
     */
    data: XOR<PayrollUpdateManyMutationInput, PayrollUncheckedUpdateManyInput>
    /**
     * Filter which Payrolls to update
     */
    where?: PayrollWhereInput
  }


  /**
   * Payroll upsert
   */
  export type PayrollUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * The filter to search for the Payroll to update in case it exists.
     */
    where: PayrollWhereUniqueInput
    /**
     * In case the Payroll found by the `where` argument doesn't exist, create a new Payroll with this data.
     */
    create: XOR<PayrollCreateInput, PayrollUncheckedCreateInput>
    /**
     * In case the Payroll was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayrollUpdateInput, PayrollUncheckedUpdateInput>
  }


  /**
   * Payroll delete
   */
  export type PayrollDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollInclude<ExtArgs> | null
    /**
     * Filter which Payroll to delete.
     */
    where: PayrollWhereUniqueInput
  }


  /**
   * Payroll deleteMany
   */
  export type PayrollDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payrolls to delete
     */
    where?: PayrollWhereInput
  }


  /**
   * Payroll.payamounts
   */
  export type Payroll$payamountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmount
     */
    select?: PayrollAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountInclude<ExtArgs> | null
    where?: PayrollAmountWhereInput
    orderBy?: PayrollAmountOrderByWithRelationInput | PayrollAmountOrderByWithRelationInput[]
    cursor?: PayrollAmountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayrollAmountScalarFieldEnum | PayrollAmountScalarFieldEnum[]
  }


  /**
   * Payroll without action
   */
  export type PayrollDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payroll
     */
    select?: PayrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollInclude<ExtArgs> | null
  }



  /**
   * Model PayrollAmount
   */

  export type AggregatePayrollAmount = {
    _count: PayrollAmountCountAggregateOutputType | null
    _avg: PayrollAmountAvgAggregateOutputType | null
    _sum: PayrollAmountSumAggregateOutputType | null
    _min: PayrollAmountMinAggregateOutputType | null
    _max: PayrollAmountMaxAggregateOutputType | null
  }

  export type PayrollAmountAvgAggregateOutputType = {
    payamount_id: number | null
    payroll_id: number | null
    gross_amount: number | null
    work_share: number | null
    conversion_rate: number | null
  }

  export type PayrollAmountSumAggregateOutputType = {
    payamount_id: number | null
    payroll_id: number | null
    gross_amount: number | null
    work_share: number | null
    conversion_rate: number | null
  }

  export type PayrollAmountMinAggregateOutputType = {
    payamount_id: number | null
    payroll_id: number | null
    gross_amount: number | null
    work_share: number | null
    conversion_rate: number | null
  }

  export type PayrollAmountMaxAggregateOutputType = {
    payamount_id: number | null
    payroll_id: number | null
    gross_amount: number | null
    work_share: number | null
    conversion_rate: number | null
  }

  export type PayrollAmountCountAggregateOutputType = {
    payamount_id: number
    payroll_id: number
    gross_amount: number
    work_share: number
    conversion_rate: number
    _all: number
  }


  export type PayrollAmountAvgAggregateInputType = {
    payamount_id?: true
    payroll_id?: true
    gross_amount?: true
    work_share?: true
    conversion_rate?: true
  }

  export type PayrollAmountSumAggregateInputType = {
    payamount_id?: true
    payroll_id?: true
    gross_amount?: true
    work_share?: true
    conversion_rate?: true
  }

  export type PayrollAmountMinAggregateInputType = {
    payamount_id?: true
    payroll_id?: true
    gross_amount?: true
    work_share?: true
    conversion_rate?: true
  }

  export type PayrollAmountMaxAggregateInputType = {
    payamount_id?: true
    payroll_id?: true
    gross_amount?: true
    work_share?: true
    conversion_rate?: true
  }

  export type PayrollAmountCountAggregateInputType = {
    payamount_id?: true
    payroll_id?: true
    gross_amount?: true
    work_share?: true
    conversion_rate?: true
    _all?: true
  }

  export type PayrollAmountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollAmount to aggregate.
     */
    where?: PayrollAmountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollAmounts to fetch.
     */
    orderBy?: PayrollAmountOrderByWithRelationInput | PayrollAmountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayrollAmountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollAmounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollAmounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayrollAmounts
    **/
    _count?: true | PayrollAmountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayrollAmountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayrollAmountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollAmountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollAmountMaxAggregateInputType
  }

  export type GetPayrollAmountAggregateType<T extends PayrollAmountAggregateArgs> = {
        [P in keyof T & keyof AggregatePayrollAmount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayrollAmount[P]>
      : GetScalarType<T[P], AggregatePayrollAmount[P]>
  }




  export type PayrollAmountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollAmountWhereInput
    orderBy?: PayrollAmountOrderByWithAggregationInput | PayrollAmountOrderByWithAggregationInput[]
    by: PayrollAmountScalarFieldEnum[] | PayrollAmountScalarFieldEnum
    having?: PayrollAmountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollAmountCountAggregateInputType | true
    _avg?: PayrollAmountAvgAggregateInputType
    _sum?: PayrollAmountSumAggregateInputType
    _min?: PayrollAmountMinAggregateInputType
    _max?: PayrollAmountMaxAggregateInputType
  }

  export type PayrollAmountGroupByOutputType = {
    payamount_id: number
    payroll_id: number
    gross_amount: number
    work_share: number | null
    conversion_rate: number | null
    _count: PayrollAmountCountAggregateOutputType | null
    _avg: PayrollAmountAvgAggregateOutputType | null
    _sum: PayrollAmountSumAggregateOutputType | null
    _min: PayrollAmountMinAggregateOutputType | null
    _max: PayrollAmountMaxAggregateOutputType | null
  }

  type GetPayrollAmountGroupByPayload<T extends PayrollAmountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollAmountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollAmountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollAmountGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollAmountGroupByOutputType[P]>
        }
      >
    >


  export type PayrollAmountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payamount_id?: boolean
    payroll_id?: boolean
    gross_amount?: boolean
    work_share?: boolean
    conversion_rate?: boolean
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollAmount"]>

  export type PayrollAmountSelectScalar = {
    payamount_id?: boolean
    payroll_id?: boolean
    gross_amount?: boolean
    work_share?: boolean
    conversion_rate?: boolean
  }

  export type PayrollAmountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payroll?: boolean | PayrollDefaultArgs<ExtArgs>
  }


  export type $PayrollAmountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayrollAmount"
    objects: {
      payroll: Prisma.$PayrollPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      payamount_id: number
      payroll_id: number
      gross_amount: number
      work_share: number | null
      conversion_rate: number | null
    }, ExtArgs["result"]["payrollAmount"]>
    composites: {}
  }


  type PayrollAmountGetPayload<S extends boolean | null | undefined | PayrollAmountDefaultArgs> = $Result.GetResult<Prisma.$PayrollAmountPayload, S>

  type PayrollAmountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PayrollAmountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PayrollAmountCountAggregateInputType | true
    }

  export interface PayrollAmountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayrollAmount'], meta: { name: 'PayrollAmount' } }
    /**
     * Find zero or one PayrollAmount that matches the filter.
     * @param {PayrollAmountFindUniqueArgs} args - Arguments to find a PayrollAmount
     * @example
     * // Get one PayrollAmount
     * const payrollAmount = await prisma.payrollAmount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PayrollAmountFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollAmountFindUniqueArgs<ExtArgs>>
    ): Prisma__PayrollAmountClient<$Result.GetResult<Prisma.$PayrollAmountPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PayrollAmount that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PayrollAmountFindUniqueOrThrowArgs} args - Arguments to find a PayrollAmount
     * @example
     * // Get one PayrollAmount
     * const payrollAmount = await prisma.payrollAmount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PayrollAmountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollAmountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PayrollAmountClient<$Result.GetResult<Prisma.$PayrollAmountPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PayrollAmount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountFindFirstArgs} args - Arguments to find a PayrollAmount
     * @example
     * // Get one PayrollAmount
     * const payrollAmount = await prisma.payrollAmount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PayrollAmountFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollAmountFindFirstArgs<ExtArgs>>
    ): Prisma__PayrollAmountClient<$Result.GetResult<Prisma.$PayrollAmountPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PayrollAmount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountFindFirstOrThrowArgs} args - Arguments to find a PayrollAmount
     * @example
     * // Get one PayrollAmount
     * const payrollAmount = await prisma.payrollAmount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PayrollAmountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollAmountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PayrollAmountClient<$Result.GetResult<Prisma.$PayrollAmountPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PayrollAmounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayrollAmounts
     * const payrollAmounts = await prisma.payrollAmount.findMany()
     * 
     * // Get first 10 PayrollAmounts
     * const payrollAmounts = await prisma.payrollAmount.findMany({ take: 10 })
     * 
     * // Only select the `payamount_id`
     * const payrollAmountWithPayamount_idOnly = await prisma.payrollAmount.findMany({ select: { payamount_id: true } })
     * 
    **/
    findMany<T extends PayrollAmountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollAmountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollAmountPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PayrollAmount.
     * @param {PayrollAmountCreateArgs} args - Arguments to create a PayrollAmount.
     * @example
     * // Create one PayrollAmount
     * const PayrollAmount = await prisma.payrollAmount.create({
     *   data: {
     *     // ... data to create a PayrollAmount
     *   }
     * })
     * 
    **/
    create<T extends PayrollAmountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollAmountCreateArgs<ExtArgs>>
    ): Prisma__PayrollAmountClient<$Result.GetResult<Prisma.$PayrollAmountPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PayrollAmounts.
     *     @param {PayrollAmountCreateManyArgs} args - Arguments to create many PayrollAmounts.
     *     @example
     *     // Create many PayrollAmounts
     *     const payrollAmount = await prisma.payrollAmount.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PayrollAmountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollAmountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PayrollAmount.
     * @param {PayrollAmountDeleteArgs} args - Arguments to delete one PayrollAmount.
     * @example
     * // Delete one PayrollAmount
     * const PayrollAmount = await prisma.payrollAmount.delete({
     *   where: {
     *     // ... filter to delete one PayrollAmount
     *   }
     * })
     * 
    **/
    delete<T extends PayrollAmountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollAmountDeleteArgs<ExtArgs>>
    ): Prisma__PayrollAmountClient<$Result.GetResult<Prisma.$PayrollAmountPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PayrollAmount.
     * @param {PayrollAmountUpdateArgs} args - Arguments to update one PayrollAmount.
     * @example
     * // Update one PayrollAmount
     * const payrollAmount = await prisma.payrollAmount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PayrollAmountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollAmountUpdateArgs<ExtArgs>>
    ): Prisma__PayrollAmountClient<$Result.GetResult<Prisma.$PayrollAmountPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PayrollAmounts.
     * @param {PayrollAmountDeleteManyArgs} args - Arguments to filter PayrollAmounts to delete.
     * @example
     * // Delete a few PayrollAmounts
     * const { count } = await prisma.payrollAmount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PayrollAmountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollAmountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollAmounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayrollAmounts
     * const payrollAmount = await prisma.payrollAmount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PayrollAmountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollAmountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PayrollAmount.
     * @param {PayrollAmountUpsertArgs} args - Arguments to update or create a PayrollAmount.
     * @example
     * // Update or create a PayrollAmount
     * const payrollAmount = await prisma.payrollAmount.upsert({
     *   create: {
     *     // ... data to create a PayrollAmount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayrollAmount we want to update
     *   }
     * })
    **/
    upsert<T extends PayrollAmountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollAmountUpsertArgs<ExtArgs>>
    ): Prisma__PayrollAmountClient<$Result.GetResult<Prisma.$PayrollAmountPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PayrollAmounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountCountArgs} args - Arguments to filter PayrollAmounts to count.
     * @example
     * // Count the number of PayrollAmounts
     * const count = await prisma.payrollAmount.count({
     *   where: {
     *     // ... the filter for the PayrollAmounts we want to count
     *   }
     * })
    **/
    count<T extends PayrollAmountCountArgs>(
      args?: Subset<T, PayrollAmountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollAmountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayrollAmount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollAmountAggregateArgs>(args: Subset<T, PayrollAmountAggregateArgs>): Prisma.PrismaPromise<GetPayrollAmountAggregateType<T>>

    /**
     * Group by PayrollAmount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayrollAmountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayrollAmountGroupByArgs['orderBy'] }
        : { orderBy?: PayrollAmountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayrollAmountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollAmountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayrollAmount model
   */
  readonly fields: PayrollAmountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayrollAmount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayrollAmountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    payroll<T extends PayrollDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PayrollDefaultArgs<ExtArgs>>): Prisma__PayrollClient<$Result.GetResult<Prisma.$PayrollPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PayrollAmount model
   */ 
  interface PayrollAmountFieldRefs {
    readonly payamount_id: FieldRef<"PayrollAmount", 'Int'>
    readonly payroll_id: FieldRef<"PayrollAmount", 'Int'>
    readonly gross_amount: FieldRef<"PayrollAmount", 'Float'>
    readonly work_share: FieldRef<"PayrollAmount", 'Float'>
    readonly conversion_rate: FieldRef<"PayrollAmount", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * PayrollAmount findUnique
   */
  export type PayrollAmountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmount
     */
    select?: PayrollAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountInclude<ExtArgs> | null
    /**
     * Filter, which PayrollAmount to fetch.
     */
    where: PayrollAmountWhereUniqueInput
  }


  /**
   * PayrollAmount findUniqueOrThrow
   */
  export type PayrollAmountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmount
     */
    select?: PayrollAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountInclude<ExtArgs> | null
    /**
     * Filter, which PayrollAmount to fetch.
     */
    where: PayrollAmountWhereUniqueInput
  }


  /**
   * PayrollAmount findFirst
   */
  export type PayrollAmountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmount
     */
    select?: PayrollAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountInclude<ExtArgs> | null
    /**
     * Filter, which PayrollAmount to fetch.
     */
    where?: PayrollAmountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollAmounts to fetch.
     */
    orderBy?: PayrollAmountOrderByWithRelationInput | PayrollAmountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollAmounts.
     */
    cursor?: PayrollAmountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollAmounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollAmounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollAmounts.
     */
    distinct?: PayrollAmountScalarFieldEnum | PayrollAmountScalarFieldEnum[]
  }


  /**
   * PayrollAmount findFirstOrThrow
   */
  export type PayrollAmountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmount
     */
    select?: PayrollAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountInclude<ExtArgs> | null
    /**
     * Filter, which PayrollAmount to fetch.
     */
    where?: PayrollAmountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollAmounts to fetch.
     */
    orderBy?: PayrollAmountOrderByWithRelationInput | PayrollAmountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollAmounts.
     */
    cursor?: PayrollAmountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollAmounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollAmounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollAmounts.
     */
    distinct?: PayrollAmountScalarFieldEnum | PayrollAmountScalarFieldEnum[]
  }


  /**
   * PayrollAmount findMany
   */
  export type PayrollAmountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmount
     */
    select?: PayrollAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountInclude<ExtArgs> | null
    /**
     * Filter, which PayrollAmounts to fetch.
     */
    where?: PayrollAmountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollAmounts to fetch.
     */
    orderBy?: PayrollAmountOrderByWithRelationInput | PayrollAmountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayrollAmounts.
     */
    cursor?: PayrollAmountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollAmounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollAmounts.
     */
    skip?: number
    distinct?: PayrollAmountScalarFieldEnum | PayrollAmountScalarFieldEnum[]
  }


  /**
   * PayrollAmount create
   */
  export type PayrollAmountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmount
     */
    select?: PayrollAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountInclude<ExtArgs> | null
    /**
     * The data needed to create a PayrollAmount.
     */
    data: XOR<PayrollAmountCreateInput, PayrollAmountUncheckedCreateInput>
  }


  /**
   * PayrollAmount createMany
   */
  export type PayrollAmountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayrollAmounts.
     */
    data: PayrollAmountCreateManyInput | PayrollAmountCreateManyInput[]
  }


  /**
   * PayrollAmount update
   */
  export type PayrollAmountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmount
     */
    select?: PayrollAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountInclude<ExtArgs> | null
    /**
     * The data needed to update a PayrollAmount.
     */
    data: XOR<PayrollAmountUpdateInput, PayrollAmountUncheckedUpdateInput>
    /**
     * Choose, which PayrollAmount to update.
     */
    where: PayrollAmountWhereUniqueInput
  }


  /**
   * PayrollAmount updateMany
   */
  export type PayrollAmountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayrollAmounts.
     */
    data: XOR<PayrollAmountUpdateManyMutationInput, PayrollAmountUncheckedUpdateManyInput>
    /**
     * Filter which PayrollAmounts to update
     */
    where?: PayrollAmountWhereInput
  }


  /**
   * PayrollAmount upsert
   */
  export type PayrollAmountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmount
     */
    select?: PayrollAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountInclude<ExtArgs> | null
    /**
     * The filter to search for the PayrollAmount to update in case it exists.
     */
    where: PayrollAmountWhereUniqueInput
    /**
     * In case the PayrollAmount found by the `where` argument doesn't exist, create a new PayrollAmount with this data.
     */
    create: XOR<PayrollAmountCreateInput, PayrollAmountUncheckedCreateInput>
    /**
     * In case the PayrollAmount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayrollAmountUpdateInput, PayrollAmountUncheckedUpdateInput>
  }


  /**
   * PayrollAmount delete
   */
  export type PayrollAmountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmount
     */
    select?: PayrollAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountInclude<ExtArgs> | null
    /**
     * Filter which PayrollAmount to delete.
     */
    where: PayrollAmountWhereUniqueInput
  }


  /**
   * PayrollAmount deleteMany
   */
  export type PayrollAmountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollAmounts to delete
     */
    where?: PayrollAmountWhereInput
  }


  /**
   * PayrollAmount without action
   */
  export type PayrollAmountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmount
     */
    select?: PayrollAmountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountInclude<ExtArgs> | null
  }



  /**
   * Model PayrollTemp
   */

  export type AggregatePayrollTemp = {
    _count: PayrollTempCountAggregateOutputType | null
    _avg: PayrollTempAvgAggregateOutputType | null
    _sum: PayrollTempSumAggregateOutputType | null
    _min: PayrollTempMinAggregateOutputType | null
    _max: PayrollTempMaxAggregateOutputType | null
  }

  export type PayrollTempAvgAggregateOutputType = {
    payroll_id: number | null
  }

  export type PayrollTempSumAggregateOutputType = {
    payroll_id: number | null
  }

  export type PayrollTempMinAggregateOutputType = {
    payroll_id: number | null
    employee_id: string | null
    payroll_range: Date | null
    payroll_date: Date | null
  }

  export type PayrollTempMaxAggregateOutputType = {
    payroll_id: number | null
    employee_id: string | null
    payroll_range: Date | null
    payroll_date: Date | null
  }

  export type PayrollTempCountAggregateOutputType = {
    payroll_id: number
    employee_id: number
    payroll_range: number
    payroll_date: number
    _all: number
  }


  export type PayrollTempAvgAggregateInputType = {
    payroll_id?: true
  }

  export type PayrollTempSumAggregateInputType = {
    payroll_id?: true
  }

  export type PayrollTempMinAggregateInputType = {
    payroll_id?: true
    employee_id?: true
    payroll_range?: true
    payroll_date?: true
  }

  export type PayrollTempMaxAggregateInputType = {
    payroll_id?: true
    employee_id?: true
    payroll_range?: true
    payroll_date?: true
  }

  export type PayrollTempCountAggregateInputType = {
    payroll_id?: true
    employee_id?: true
    payroll_range?: true
    payroll_date?: true
    _all?: true
  }

  export type PayrollTempAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollTemp to aggregate.
     */
    where?: PayrollTempWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollTemps to fetch.
     */
    orderBy?: PayrollTempOrderByWithRelationInput | PayrollTempOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayrollTempWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollTemps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollTemps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayrollTemps
    **/
    _count?: true | PayrollTempCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayrollTempAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayrollTempSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollTempMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollTempMaxAggregateInputType
  }

  export type GetPayrollTempAggregateType<T extends PayrollTempAggregateArgs> = {
        [P in keyof T & keyof AggregatePayrollTemp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayrollTemp[P]>
      : GetScalarType<T[P], AggregatePayrollTemp[P]>
  }




  export type PayrollTempGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollTempWhereInput
    orderBy?: PayrollTempOrderByWithAggregationInput | PayrollTempOrderByWithAggregationInput[]
    by: PayrollTempScalarFieldEnum[] | PayrollTempScalarFieldEnum
    having?: PayrollTempScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollTempCountAggregateInputType | true
    _avg?: PayrollTempAvgAggregateInputType
    _sum?: PayrollTempSumAggregateInputType
    _min?: PayrollTempMinAggregateInputType
    _max?: PayrollTempMaxAggregateInputType
  }

  export type PayrollTempGroupByOutputType = {
    payroll_id: number
    employee_id: string
    payroll_range: Date
    payroll_date: Date
    _count: PayrollTempCountAggregateOutputType | null
    _avg: PayrollTempAvgAggregateOutputType | null
    _sum: PayrollTempSumAggregateOutputType | null
    _min: PayrollTempMinAggregateOutputType | null
    _max: PayrollTempMaxAggregateOutputType | null
  }

  type GetPayrollTempGroupByPayload<T extends PayrollTempGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollTempGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollTempGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollTempGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollTempGroupByOutputType[P]>
        }
      >
    >


  export type PayrollTempSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payroll_id?: boolean
    employee_id?: boolean
    payroll_range?: boolean
    payroll_date?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payamounts?: boolean | PayrollTemp$payamountsArgs<ExtArgs>
    _count?: boolean | PayrollTempCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollTemp"]>

  export type PayrollTempSelectScalar = {
    payroll_id?: boolean
    employee_id?: boolean
    payroll_range?: boolean
    payroll_date?: boolean
  }

  export type PayrollTempInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    payamounts?: boolean | PayrollTemp$payamountsArgs<ExtArgs>
    _count?: boolean | PayrollTempCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PayrollTempPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayrollTemp"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      payamounts: Prisma.$PayrollAmountTempPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      payroll_id: number
      employee_id: string
      payroll_range: Date
      payroll_date: Date
    }, ExtArgs["result"]["payrollTemp"]>
    composites: {}
  }


  type PayrollTempGetPayload<S extends boolean | null | undefined | PayrollTempDefaultArgs> = $Result.GetResult<Prisma.$PayrollTempPayload, S>

  type PayrollTempCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PayrollTempFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PayrollTempCountAggregateInputType | true
    }

  export interface PayrollTempDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayrollTemp'], meta: { name: 'PayrollTemp' } }
    /**
     * Find zero or one PayrollTemp that matches the filter.
     * @param {PayrollTempFindUniqueArgs} args - Arguments to find a PayrollTemp
     * @example
     * // Get one PayrollTemp
     * const payrollTemp = await prisma.payrollTemp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PayrollTempFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollTempFindUniqueArgs<ExtArgs>>
    ): Prisma__PayrollTempClient<$Result.GetResult<Prisma.$PayrollTempPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PayrollTemp that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PayrollTempFindUniqueOrThrowArgs} args - Arguments to find a PayrollTemp
     * @example
     * // Get one PayrollTemp
     * const payrollTemp = await prisma.payrollTemp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PayrollTempFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollTempFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PayrollTempClient<$Result.GetResult<Prisma.$PayrollTempPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PayrollTemp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollTempFindFirstArgs} args - Arguments to find a PayrollTemp
     * @example
     * // Get one PayrollTemp
     * const payrollTemp = await prisma.payrollTemp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PayrollTempFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollTempFindFirstArgs<ExtArgs>>
    ): Prisma__PayrollTempClient<$Result.GetResult<Prisma.$PayrollTempPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PayrollTemp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollTempFindFirstOrThrowArgs} args - Arguments to find a PayrollTemp
     * @example
     * // Get one PayrollTemp
     * const payrollTemp = await prisma.payrollTemp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PayrollTempFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollTempFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PayrollTempClient<$Result.GetResult<Prisma.$PayrollTempPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PayrollTemps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollTempFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayrollTemps
     * const payrollTemps = await prisma.payrollTemp.findMany()
     * 
     * // Get first 10 PayrollTemps
     * const payrollTemps = await prisma.payrollTemp.findMany({ take: 10 })
     * 
     * // Only select the `payroll_id`
     * const payrollTempWithPayroll_idOnly = await prisma.payrollTemp.findMany({ select: { payroll_id: true } })
     * 
    **/
    findMany<T extends PayrollTempFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollTempFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollTempPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PayrollTemp.
     * @param {PayrollTempCreateArgs} args - Arguments to create a PayrollTemp.
     * @example
     * // Create one PayrollTemp
     * const PayrollTemp = await prisma.payrollTemp.create({
     *   data: {
     *     // ... data to create a PayrollTemp
     *   }
     * })
     * 
    **/
    create<T extends PayrollTempCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollTempCreateArgs<ExtArgs>>
    ): Prisma__PayrollTempClient<$Result.GetResult<Prisma.$PayrollTempPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PayrollTemps.
     *     @param {PayrollTempCreateManyArgs} args - Arguments to create many PayrollTemps.
     *     @example
     *     // Create many PayrollTemps
     *     const payrollTemp = await prisma.payrollTemp.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PayrollTempCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollTempCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PayrollTemp.
     * @param {PayrollTempDeleteArgs} args - Arguments to delete one PayrollTemp.
     * @example
     * // Delete one PayrollTemp
     * const PayrollTemp = await prisma.payrollTemp.delete({
     *   where: {
     *     // ... filter to delete one PayrollTemp
     *   }
     * })
     * 
    **/
    delete<T extends PayrollTempDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollTempDeleteArgs<ExtArgs>>
    ): Prisma__PayrollTempClient<$Result.GetResult<Prisma.$PayrollTempPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PayrollTemp.
     * @param {PayrollTempUpdateArgs} args - Arguments to update one PayrollTemp.
     * @example
     * // Update one PayrollTemp
     * const payrollTemp = await prisma.payrollTemp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PayrollTempUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollTempUpdateArgs<ExtArgs>>
    ): Prisma__PayrollTempClient<$Result.GetResult<Prisma.$PayrollTempPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PayrollTemps.
     * @param {PayrollTempDeleteManyArgs} args - Arguments to filter PayrollTemps to delete.
     * @example
     * // Delete a few PayrollTemps
     * const { count } = await prisma.payrollTemp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PayrollTempDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollTempDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollTemps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollTempUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayrollTemps
     * const payrollTemp = await prisma.payrollTemp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PayrollTempUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollTempUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PayrollTemp.
     * @param {PayrollTempUpsertArgs} args - Arguments to update or create a PayrollTemp.
     * @example
     * // Update or create a PayrollTemp
     * const payrollTemp = await prisma.payrollTemp.upsert({
     *   create: {
     *     // ... data to create a PayrollTemp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayrollTemp we want to update
     *   }
     * })
    **/
    upsert<T extends PayrollTempUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollTempUpsertArgs<ExtArgs>>
    ): Prisma__PayrollTempClient<$Result.GetResult<Prisma.$PayrollTempPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PayrollTemps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollTempCountArgs} args - Arguments to filter PayrollTemps to count.
     * @example
     * // Count the number of PayrollTemps
     * const count = await prisma.payrollTemp.count({
     *   where: {
     *     // ... the filter for the PayrollTemps we want to count
     *   }
     * })
    **/
    count<T extends PayrollTempCountArgs>(
      args?: Subset<T, PayrollTempCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollTempCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayrollTemp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollTempAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollTempAggregateArgs>(args: Subset<T, PayrollTempAggregateArgs>): Prisma.PrismaPromise<GetPayrollTempAggregateType<T>>

    /**
     * Group by PayrollTemp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollTempGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayrollTempGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayrollTempGroupByArgs['orderBy'] }
        : { orderBy?: PayrollTempGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayrollTempGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollTempGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayrollTemp model
   */
  readonly fields: PayrollTempFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayrollTemp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayrollTempClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    payamounts<T extends PayrollTemp$payamountsArgs<ExtArgs> = {}>(args?: Subset<T, PayrollTemp$payamountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollAmountTempPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PayrollTemp model
   */ 
  interface PayrollTempFieldRefs {
    readonly payroll_id: FieldRef<"PayrollTemp", 'Int'>
    readonly employee_id: FieldRef<"PayrollTemp", 'String'>
    readonly payroll_range: FieldRef<"PayrollTemp", 'DateTime'>
    readonly payroll_date: FieldRef<"PayrollTemp", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * PayrollTemp findUnique
   */
  export type PayrollTempFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollTemp
     */
    select?: PayrollTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollTempInclude<ExtArgs> | null
    /**
     * Filter, which PayrollTemp to fetch.
     */
    where: PayrollTempWhereUniqueInput
  }


  /**
   * PayrollTemp findUniqueOrThrow
   */
  export type PayrollTempFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollTemp
     */
    select?: PayrollTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollTempInclude<ExtArgs> | null
    /**
     * Filter, which PayrollTemp to fetch.
     */
    where: PayrollTempWhereUniqueInput
  }


  /**
   * PayrollTemp findFirst
   */
  export type PayrollTempFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollTemp
     */
    select?: PayrollTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollTempInclude<ExtArgs> | null
    /**
     * Filter, which PayrollTemp to fetch.
     */
    where?: PayrollTempWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollTemps to fetch.
     */
    orderBy?: PayrollTempOrderByWithRelationInput | PayrollTempOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollTemps.
     */
    cursor?: PayrollTempWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollTemps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollTemps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollTemps.
     */
    distinct?: PayrollTempScalarFieldEnum | PayrollTempScalarFieldEnum[]
  }


  /**
   * PayrollTemp findFirstOrThrow
   */
  export type PayrollTempFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollTemp
     */
    select?: PayrollTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollTempInclude<ExtArgs> | null
    /**
     * Filter, which PayrollTemp to fetch.
     */
    where?: PayrollTempWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollTemps to fetch.
     */
    orderBy?: PayrollTempOrderByWithRelationInput | PayrollTempOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollTemps.
     */
    cursor?: PayrollTempWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollTemps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollTemps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollTemps.
     */
    distinct?: PayrollTempScalarFieldEnum | PayrollTempScalarFieldEnum[]
  }


  /**
   * PayrollTemp findMany
   */
  export type PayrollTempFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollTemp
     */
    select?: PayrollTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollTempInclude<ExtArgs> | null
    /**
     * Filter, which PayrollTemps to fetch.
     */
    where?: PayrollTempWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollTemps to fetch.
     */
    orderBy?: PayrollTempOrderByWithRelationInput | PayrollTempOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayrollTemps.
     */
    cursor?: PayrollTempWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollTemps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollTemps.
     */
    skip?: number
    distinct?: PayrollTempScalarFieldEnum | PayrollTempScalarFieldEnum[]
  }


  /**
   * PayrollTemp create
   */
  export type PayrollTempCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollTemp
     */
    select?: PayrollTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollTempInclude<ExtArgs> | null
    /**
     * The data needed to create a PayrollTemp.
     */
    data: XOR<PayrollTempCreateInput, PayrollTempUncheckedCreateInput>
  }


  /**
   * PayrollTemp createMany
   */
  export type PayrollTempCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayrollTemps.
     */
    data: PayrollTempCreateManyInput | PayrollTempCreateManyInput[]
  }


  /**
   * PayrollTemp update
   */
  export type PayrollTempUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollTemp
     */
    select?: PayrollTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollTempInclude<ExtArgs> | null
    /**
     * The data needed to update a PayrollTemp.
     */
    data: XOR<PayrollTempUpdateInput, PayrollTempUncheckedUpdateInput>
    /**
     * Choose, which PayrollTemp to update.
     */
    where: PayrollTempWhereUniqueInput
  }


  /**
   * PayrollTemp updateMany
   */
  export type PayrollTempUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayrollTemps.
     */
    data: XOR<PayrollTempUpdateManyMutationInput, PayrollTempUncheckedUpdateManyInput>
    /**
     * Filter which PayrollTemps to update
     */
    where?: PayrollTempWhereInput
  }


  /**
   * PayrollTemp upsert
   */
  export type PayrollTempUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollTemp
     */
    select?: PayrollTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollTempInclude<ExtArgs> | null
    /**
     * The filter to search for the PayrollTemp to update in case it exists.
     */
    where: PayrollTempWhereUniqueInput
    /**
     * In case the PayrollTemp found by the `where` argument doesn't exist, create a new PayrollTemp with this data.
     */
    create: XOR<PayrollTempCreateInput, PayrollTempUncheckedCreateInput>
    /**
     * In case the PayrollTemp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayrollTempUpdateInput, PayrollTempUncheckedUpdateInput>
  }


  /**
   * PayrollTemp delete
   */
  export type PayrollTempDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollTemp
     */
    select?: PayrollTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollTempInclude<ExtArgs> | null
    /**
     * Filter which PayrollTemp to delete.
     */
    where: PayrollTempWhereUniqueInput
  }


  /**
   * PayrollTemp deleteMany
   */
  export type PayrollTempDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollTemps to delete
     */
    where?: PayrollTempWhereInput
  }


  /**
   * PayrollTemp.payamounts
   */
  export type PayrollTemp$payamountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmountTemp
     */
    select?: PayrollAmountTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountTempInclude<ExtArgs> | null
    where?: PayrollAmountTempWhereInput
    orderBy?: PayrollAmountTempOrderByWithRelationInput | PayrollAmountTempOrderByWithRelationInput[]
    cursor?: PayrollAmountTempWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayrollAmountTempScalarFieldEnum | PayrollAmountTempScalarFieldEnum[]
  }


  /**
   * PayrollTemp without action
   */
  export type PayrollTempDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollTemp
     */
    select?: PayrollTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollTempInclude<ExtArgs> | null
  }



  /**
   * Model PayrollAmountTemp
   */

  export type AggregatePayrollAmountTemp = {
    _count: PayrollAmountTempCountAggregateOutputType | null
    _avg: PayrollAmountTempAvgAggregateOutputType | null
    _sum: PayrollAmountTempSumAggregateOutputType | null
    _min: PayrollAmountTempMinAggregateOutputType | null
    _max: PayrollAmountTempMaxAggregateOutputType | null
  }

  export type PayrollAmountTempAvgAggregateOutputType = {
    payamount_id: number | null
    payroll_id: number | null
    gross_amount: number | null
    work_share: number | null
    conversion_rate: number | null
  }

  export type PayrollAmountTempSumAggregateOutputType = {
    payamount_id: number | null
    payroll_id: number | null
    gross_amount: number | null
    work_share: number | null
    conversion_rate: number | null
  }

  export type PayrollAmountTempMinAggregateOutputType = {
    payamount_id: number | null
    payroll_id: number | null
    gross_amount: number | null
    work_share: number | null
    conversion_rate: number | null
  }

  export type PayrollAmountTempMaxAggregateOutputType = {
    payamount_id: number | null
    payroll_id: number | null
    gross_amount: number | null
    work_share: number | null
    conversion_rate: number | null
  }

  export type PayrollAmountTempCountAggregateOutputType = {
    payamount_id: number
    payroll_id: number
    gross_amount: number
    work_share: number
    conversion_rate: number
    _all: number
  }


  export type PayrollAmountTempAvgAggregateInputType = {
    payamount_id?: true
    payroll_id?: true
    gross_amount?: true
    work_share?: true
    conversion_rate?: true
  }

  export type PayrollAmountTempSumAggregateInputType = {
    payamount_id?: true
    payroll_id?: true
    gross_amount?: true
    work_share?: true
    conversion_rate?: true
  }

  export type PayrollAmountTempMinAggregateInputType = {
    payamount_id?: true
    payroll_id?: true
    gross_amount?: true
    work_share?: true
    conversion_rate?: true
  }

  export type PayrollAmountTempMaxAggregateInputType = {
    payamount_id?: true
    payroll_id?: true
    gross_amount?: true
    work_share?: true
    conversion_rate?: true
  }

  export type PayrollAmountTempCountAggregateInputType = {
    payamount_id?: true
    payroll_id?: true
    gross_amount?: true
    work_share?: true
    conversion_rate?: true
    _all?: true
  }

  export type PayrollAmountTempAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollAmountTemp to aggregate.
     */
    where?: PayrollAmountTempWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollAmountTemps to fetch.
     */
    orderBy?: PayrollAmountTempOrderByWithRelationInput | PayrollAmountTempOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayrollAmountTempWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollAmountTemps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollAmountTemps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayrollAmountTemps
    **/
    _count?: true | PayrollAmountTempCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayrollAmountTempAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayrollAmountTempSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollAmountTempMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollAmountTempMaxAggregateInputType
  }

  export type GetPayrollAmountTempAggregateType<T extends PayrollAmountTempAggregateArgs> = {
        [P in keyof T & keyof AggregatePayrollAmountTemp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayrollAmountTemp[P]>
      : GetScalarType<T[P], AggregatePayrollAmountTemp[P]>
  }




  export type PayrollAmountTempGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollAmountTempWhereInput
    orderBy?: PayrollAmountTempOrderByWithAggregationInput | PayrollAmountTempOrderByWithAggregationInput[]
    by: PayrollAmountTempScalarFieldEnum[] | PayrollAmountTempScalarFieldEnum
    having?: PayrollAmountTempScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollAmountTempCountAggregateInputType | true
    _avg?: PayrollAmountTempAvgAggregateInputType
    _sum?: PayrollAmountTempSumAggregateInputType
    _min?: PayrollAmountTempMinAggregateInputType
    _max?: PayrollAmountTempMaxAggregateInputType
  }

  export type PayrollAmountTempGroupByOutputType = {
    payamount_id: number
    payroll_id: number
    gross_amount: number
    work_share: number | null
    conversion_rate: number | null
    _count: PayrollAmountTempCountAggregateOutputType | null
    _avg: PayrollAmountTempAvgAggregateOutputType | null
    _sum: PayrollAmountTempSumAggregateOutputType | null
    _min: PayrollAmountTempMinAggregateOutputType | null
    _max: PayrollAmountTempMaxAggregateOutputType | null
  }

  type GetPayrollAmountTempGroupByPayload<T extends PayrollAmountTempGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollAmountTempGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollAmountTempGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollAmountTempGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollAmountTempGroupByOutputType[P]>
        }
      >
    >


  export type PayrollAmountTempSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payamount_id?: boolean
    payroll_id?: boolean
    gross_amount?: boolean
    work_share?: boolean
    conversion_rate?: boolean
    payroll_temp?: boolean | PayrollTempDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollAmountTemp"]>

  export type PayrollAmountTempSelectScalar = {
    payamount_id?: boolean
    payroll_id?: boolean
    gross_amount?: boolean
    work_share?: boolean
    conversion_rate?: boolean
  }

  export type PayrollAmountTempInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payroll_temp?: boolean | PayrollTempDefaultArgs<ExtArgs>
  }


  export type $PayrollAmountTempPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayrollAmountTemp"
    objects: {
      payroll_temp: Prisma.$PayrollTempPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      payamount_id: number
      payroll_id: number
      gross_amount: number
      work_share: number | null
      conversion_rate: number | null
    }, ExtArgs["result"]["payrollAmountTemp"]>
    composites: {}
  }


  type PayrollAmountTempGetPayload<S extends boolean | null | undefined | PayrollAmountTempDefaultArgs> = $Result.GetResult<Prisma.$PayrollAmountTempPayload, S>

  type PayrollAmountTempCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PayrollAmountTempFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PayrollAmountTempCountAggregateInputType | true
    }

  export interface PayrollAmountTempDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayrollAmountTemp'], meta: { name: 'PayrollAmountTemp' } }
    /**
     * Find zero or one PayrollAmountTemp that matches the filter.
     * @param {PayrollAmountTempFindUniqueArgs} args - Arguments to find a PayrollAmountTemp
     * @example
     * // Get one PayrollAmountTemp
     * const payrollAmountTemp = await prisma.payrollAmountTemp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PayrollAmountTempFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollAmountTempFindUniqueArgs<ExtArgs>>
    ): Prisma__PayrollAmountTempClient<$Result.GetResult<Prisma.$PayrollAmountTempPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PayrollAmountTemp that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PayrollAmountTempFindUniqueOrThrowArgs} args - Arguments to find a PayrollAmountTemp
     * @example
     * // Get one PayrollAmountTemp
     * const payrollAmountTemp = await prisma.payrollAmountTemp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PayrollAmountTempFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollAmountTempFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PayrollAmountTempClient<$Result.GetResult<Prisma.$PayrollAmountTempPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PayrollAmountTemp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountTempFindFirstArgs} args - Arguments to find a PayrollAmountTemp
     * @example
     * // Get one PayrollAmountTemp
     * const payrollAmountTemp = await prisma.payrollAmountTemp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PayrollAmountTempFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollAmountTempFindFirstArgs<ExtArgs>>
    ): Prisma__PayrollAmountTempClient<$Result.GetResult<Prisma.$PayrollAmountTempPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PayrollAmountTemp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountTempFindFirstOrThrowArgs} args - Arguments to find a PayrollAmountTemp
     * @example
     * // Get one PayrollAmountTemp
     * const payrollAmountTemp = await prisma.payrollAmountTemp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PayrollAmountTempFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollAmountTempFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PayrollAmountTempClient<$Result.GetResult<Prisma.$PayrollAmountTempPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PayrollAmountTemps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountTempFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayrollAmountTemps
     * const payrollAmountTemps = await prisma.payrollAmountTemp.findMany()
     * 
     * // Get first 10 PayrollAmountTemps
     * const payrollAmountTemps = await prisma.payrollAmountTemp.findMany({ take: 10 })
     * 
     * // Only select the `payamount_id`
     * const payrollAmountTempWithPayamount_idOnly = await prisma.payrollAmountTemp.findMany({ select: { payamount_id: true } })
     * 
    **/
    findMany<T extends PayrollAmountTempFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollAmountTempFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollAmountTempPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PayrollAmountTemp.
     * @param {PayrollAmountTempCreateArgs} args - Arguments to create a PayrollAmountTemp.
     * @example
     * // Create one PayrollAmountTemp
     * const PayrollAmountTemp = await prisma.payrollAmountTemp.create({
     *   data: {
     *     // ... data to create a PayrollAmountTemp
     *   }
     * })
     * 
    **/
    create<T extends PayrollAmountTempCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollAmountTempCreateArgs<ExtArgs>>
    ): Prisma__PayrollAmountTempClient<$Result.GetResult<Prisma.$PayrollAmountTempPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PayrollAmountTemps.
     *     @param {PayrollAmountTempCreateManyArgs} args - Arguments to create many PayrollAmountTemps.
     *     @example
     *     // Create many PayrollAmountTemps
     *     const payrollAmountTemp = await prisma.payrollAmountTemp.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PayrollAmountTempCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollAmountTempCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PayrollAmountTemp.
     * @param {PayrollAmountTempDeleteArgs} args - Arguments to delete one PayrollAmountTemp.
     * @example
     * // Delete one PayrollAmountTemp
     * const PayrollAmountTemp = await prisma.payrollAmountTemp.delete({
     *   where: {
     *     // ... filter to delete one PayrollAmountTemp
     *   }
     * })
     * 
    **/
    delete<T extends PayrollAmountTempDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollAmountTempDeleteArgs<ExtArgs>>
    ): Prisma__PayrollAmountTempClient<$Result.GetResult<Prisma.$PayrollAmountTempPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PayrollAmountTemp.
     * @param {PayrollAmountTempUpdateArgs} args - Arguments to update one PayrollAmountTemp.
     * @example
     * // Update one PayrollAmountTemp
     * const payrollAmountTemp = await prisma.payrollAmountTemp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PayrollAmountTempUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollAmountTempUpdateArgs<ExtArgs>>
    ): Prisma__PayrollAmountTempClient<$Result.GetResult<Prisma.$PayrollAmountTempPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PayrollAmountTemps.
     * @param {PayrollAmountTempDeleteManyArgs} args - Arguments to filter PayrollAmountTemps to delete.
     * @example
     * // Delete a few PayrollAmountTemps
     * const { count } = await prisma.payrollAmountTemp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PayrollAmountTempDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PayrollAmountTempDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollAmountTemps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountTempUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayrollAmountTemps
     * const payrollAmountTemp = await prisma.payrollAmountTemp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PayrollAmountTempUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollAmountTempUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PayrollAmountTemp.
     * @param {PayrollAmountTempUpsertArgs} args - Arguments to update or create a PayrollAmountTemp.
     * @example
     * // Update or create a PayrollAmountTemp
     * const payrollAmountTemp = await prisma.payrollAmountTemp.upsert({
     *   create: {
     *     // ... data to create a PayrollAmountTemp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayrollAmountTemp we want to update
     *   }
     * })
    **/
    upsert<T extends PayrollAmountTempUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PayrollAmountTempUpsertArgs<ExtArgs>>
    ): Prisma__PayrollAmountTempClient<$Result.GetResult<Prisma.$PayrollAmountTempPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PayrollAmountTemps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountTempCountArgs} args - Arguments to filter PayrollAmountTemps to count.
     * @example
     * // Count the number of PayrollAmountTemps
     * const count = await prisma.payrollAmountTemp.count({
     *   where: {
     *     // ... the filter for the PayrollAmountTemps we want to count
     *   }
     * })
    **/
    count<T extends PayrollAmountTempCountArgs>(
      args?: Subset<T, PayrollAmountTempCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollAmountTempCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayrollAmountTemp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountTempAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollAmountTempAggregateArgs>(args: Subset<T, PayrollAmountTempAggregateArgs>): Prisma.PrismaPromise<GetPayrollAmountTempAggregateType<T>>

    /**
     * Group by PayrollAmountTemp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAmountTempGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayrollAmountTempGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayrollAmountTempGroupByArgs['orderBy'] }
        : { orderBy?: PayrollAmountTempGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayrollAmountTempGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollAmountTempGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayrollAmountTemp model
   */
  readonly fields: PayrollAmountTempFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayrollAmountTemp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayrollAmountTempClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    payroll_temp<T extends PayrollTempDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PayrollTempDefaultArgs<ExtArgs>>): Prisma__PayrollTempClient<$Result.GetResult<Prisma.$PayrollTempPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PayrollAmountTemp model
   */ 
  interface PayrollAmountTempFieldRefs {
    readonly payamount_id: FieldRef<"PayrollAmountTemp", 'Int'>
    readonly payroll_id: FieldRef<"PayrollAmountTemp", 'Int'>
    readonly gross_amount: FieldRef<"PayrollAmountTemp", 'Float'>
    readonly work_share: FieldRef<"PayrollAmountTemp", 'Float'>
    readonly conversion_rate: FieldRef<"PayrollAmountTemp", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * PayrollAmountTemp findUnique
   */
  export type PayrollAmountTempFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmountTemp
     */
    select?: PayrollAmountTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountTempInclude<ExtArgs> | null
    /**
     * Filter, which PayrollAmountTemp to fetch.
     */
    where: PayrollAmountTempWhereUniqueInput
  }


  /**
   * PayrollAmountTemp findUniqueOrThrow
   */
  export type PayrollAmountTempFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmountTemp
     */
    select?: PayrollAmountTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountTempInclude<ExtArgs> | null
    /**
     * Filter, which PayrollAmountTemp to fetch.
     */
    where: PayrollAmountTempWhereUniqueInput
  }


  /**
   * PayrollAmountTemp findFirst
   */
  export type PayrollAmountTempFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmountTemp
     */
    select?: PayrollAmountTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountTempInclude<ExtArgs> | null
    /**
     * Filter, which PayrollAmountTemp to fetch.
     */
    where?: PayrollAmountTempWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollAmountTemps to fetch.
     */
    orderBy?: PayrollAmountTempOrderByWithRelationInput | PayrollAmountTempOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollAmountTemps.
     */
    cursor?: PayrollAmountTempWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollAmountTemps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollAmountTemps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollAmountTemps.
     */
    distinct?: PayrollAmountTempScalarFieldEnum | PayrollAmountTempScalarFieldEnum[]
  }


  /**
   * PayrollAmountTemp findFirstOrThrow
   */
  export type PayrollAmountTempFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmountTemp
     */
    select?: PayrollAmountTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountTempInclude<ExtArgs> | null
    /**
     * Filter, which PayrollAmountTemp to fetch.
     */
    where?: PayrollAmountTempWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollAmountTemps to fetch.
     */
    orderBy?: PayrollAmountTempOrderByWithRelationInput | PayrollAmountTempOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollAmountTemps.
     */
    cursor?: PayrollAmountTempWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollAmountTemps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollAmountTemps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollAmountTemps.
     */
    distinct?: PayrollAmountTempScalarFieldEnum | PayrollAmountTempScalarFieldEnum[]
  }


  /**
   * PayrollAmountTemp findMany
   */
  export type PayrollAmountTempFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmountTemp
     */
    select?: PayrollAmountTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountTempInclude<ExtArgs> | null
    /**
     * Filter, which PayrollAmountTemps to fetch.
     */
    where?: PayrollAmountTempWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollAmountTemps to fetch.
     */
    orderBy?: PayrollAmountTempOrderByWithRelationInput | PayrollAmountTempOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayrollAmountTemps.
     */
    cursor?: PayrollAmountTempWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollAmountTemps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollAmountTemps.
     */
    skip?: number
    distinct?: PayrollAmountTempScalarFieldEnum | PayrollAmountTempScalarFieldEnum[]
  }


  /**
   * PayrollAmountTemp create
   */
  export type PayrollAmountTempCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmountTemp
     */
    select?: PayrollAmountTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountTempInclude<ExtArgs> | null
    /**
     * The data needed to create a PayrollAmountTemp.
     */
    data: XOR<PayrollAmountTempCreateInput, PayrollAmountTempUncheckedCreateInput>
  }


  /**
   * PayrollAmountTemp createMany
   */
  export type PayrollAmountTempCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayrollAmountTemps.
     */
    data: PayrollAmountTempCreateManyInput | PayrollAmountTempCreateManyInput[]
  }


  /**
   * PayrollAmountTemp update
   */
  export type PayrollAmountTempUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmountTemp
     */
    select?: PayrollAmountTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountTempInclude<ExtArgs> | null
    /**
     * The data needed to update a PayrollAmountTemp.
     */
    data: XOR<PayrollAmountTempUpdateInput, PayrollAmountTempUncheckedUpdateInput>
    /**
     * Choose, which PayrollAmountTemp to update.
     */
    where: PayrollAmountTempWhereUniqueInput
  }


  /**
   * PayrollAmountTemp updateMany
   */
  export type PayrollAmountTempUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayrollAmountTemps.
     */
    data: XOR<PayrollAmountTempUpdateManyMutationInput, PayrollAmountTempUncheckedUpdateManyInput>
    /**
     * Filter which PayrollAmountTemps to update
     */
    where?: PayrollAmountTempWhereInput
  }


  /**
   * PayrollAmountTemp upsert
   */
  export type PayrollAmountTempUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmountTemp
     */
    select?: PayrollAmountTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountTempInclude<ExtArgs> | null
    /**
     * The filter to search for the PayrollAmountTemp to update in case it exists.
     */
    where: PayrollAmountTempWhereUniqueInput
    /**
     * In case the PayrollAmountTemp found by the `where` argument doesn't exist, create a new PayrollAmountTemp with this data.
     */
    create: XOR<PayrollAmountTempCreateInput, PayrollAmountTempUncheckedCreateInput>
    /**
     * In case the PayrollAmountTemp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayrollAmountTempUpdateInput, PayrollAmountTempUncheckedUpdateInput>
  }


  /**
   * PayrollAmountTemp delete
   */
  export type PayrollAmountTempDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmountTemp
     */
    select?: PayrollAmountTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountTempInclude<ExtArgs> | null
    /**
     * Filter which PayrollAmountTemp to delete.
     */
    where: PayrollAmountTempWhereUniqueInput
  }


  /**
   * PayrollAmountTemp deleteMany
   */
  export type PayrollAmountTempDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollAmountTemps to delete
     */
    where?: PayrollAmountTempWhereInput
  }


  /**
   * PayrollAmountTemp without action
   */
  export type PayrollAmountTempDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollAmountTemp
     */
    select?: PayrollAmountTempSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PayrollAmountTempInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CompanyScalarFieldEnum: {
    company_id: 'company_id',
    company_name: 'company_name'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    department_id: 'department_id',
    department_name: 'department_name',
    company_id: 'company_id'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    employee_id: 'employee_id',
    lastName: 'lastName',
    firstName: 'firstName',
    middleName: 'middleName',
    company_id: 'company_id',
    start_train_date: 'start_train_date',
    start_income_date: 'start_income_date',
    start_10k_date: 'start_10k_date',
    worker_type: 'worker_type',
    wage_rate: 'wage_rate',
    rate_type: 'rate_type'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const LeaveScalarFieldEnum: {
    leave_id: 'leave_id',
    employee_id: 'employee_id',
    start_leave: 'start_leave',
    end_leave: 'end_leave',
    total_days: 'total_days'
  };

  export type LeaveScalarFieldEnum = (typeof LeaveScalarFieldEnum)[keyof typeof LeaveScalarFieldEnum]


  export const PayrollScalarFieldEnum: {
    payroll_id: 'payroll_id',
    employee_id: 'employee_id',
    payroll_range: 'payroll_range',
    payroll_date: 'payroll_date'
  };

  export type PayrollScalarFieldEnum = (typeof PayrollScalarFieldEnum)[keyof typeof PayrollScalarFieldEnum]


  export const PayrollAmountScalarFieldEnum: {
    payamount_id: 'payamount_id',
    payroll_id: 'payroll_id',
    gross_amount: 'gross_amount',
    work_share: 'work_share',
    conversion_rate: 'conversion_rate'
  };

  export type PayrollAmountScalarFieldEnum = (typeof PayrollAmountScalarFieldEnum)[keyof typeof PayrollAmountScalarFieldEnum]


  export const PayrollTempScalarFieldEnum: {
    payroll_id: 'payroll_id',
    employee_id: 'employee_id',
    payroll_range: 'payroll_range',
    payroll_date: 'payroll_date'
  };

  export type PayrollTempScalarFieldEnum = (typeof PayrollTempScalarFieldEnum)[keyof typeof PayrollTempScalarFieldEnum]


  export const PayrollAmountTempScalarFieldEnum: {
    payamount_id: 'payamount_id',
    payroll_id: 'payroll_id',
    gross_amount: 'gross_amount',
    work_share: 'work_share',
    conversion_rate: 'conversion_rate'
  };

  export type PayrollAmountTempScalarFieldEnum = (typeof PayrollAmountTempScalarFieldEnum)[keyof typeof PayrollAmountTempScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    company_id?: IntFilter<"Company"> | number
    company_name?: StringFilter<"Company"> | string
    departments?: DepartmentListRelationFilter
    employees?: EmployeeListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    company_id?: SortOrder
    company_name?: SortOrder
    departments?: DepartmentOrderByRelationAggregateInput
    employees?: EmployeeOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    company_id?: number
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    company_name?: StringFilter<"Company"> | string
    departments?: DepartmentListRelationFilter
    employees?: EmployeeListRelationFilter
  }, "company_id">

  export type CompanyOrderByWithAggregationInput = {
    company_id?: SortOrder
    company_name?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    company_id?: IntWithAggregatesFilter<"Company"> | number
    company_name?: StringWithAggregatesFilter<"Company"> | string
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    department_id?: IntFilter<"Department"> | number
    department_name?: StringFilter<"Department"> | string
    company_id?: IntFilter<"Department"> | number
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type DepartmentOrderByWithRelationInput = {
    department_id?: SortOrder
    department_name?: SortOrder
    company_id?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    department_id?: number
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    department_name?: StringFilter<"Department"> | string
    company_id?: IntFilter<"Department"> | number
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "department_id">

  export type DepartmentOrderByWithAggregationInput = {
    department_id?: SortOrder
    department_name?: SortOrder
    company_id?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    department_id?: IntWithAggregatesFilter<"Department"> | number
    department_name?: StringWithAggregatesFilter<"Department"> | string
    company_id?: IntWithAggregatesFilter<"Department"> | number
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    employee_id?: StringFilter<"Employee"> | string
    lastName?: StringFilter<"Employee"> | string
    firstName?: StringFilter<"Employee"> | string
    middleName?: StringNullableFilter<"Employee"> | string | null
    company_id?: IntNullableFilter<"Employee"> | number | null
    start_train_date?: DateTimeFilter<"Employee"> | Date | string
    start_income_date?: DateTimeFilter<"Employee"> | Date | string
    start_10k_date?: DateTimeFilter<"Employee"> | Date | string
    worker_type?: StringFilter<"Employee"> | string
    wage_rate?: FloatFilter<"Employee"> | number
    rate_type?: StringFilter<"Employee"> | string
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    leaves?: LeaveListRelationFilter
    payrolls?: PayrollListRelationFilter
    payroll_temps?: PayrollTempListRelationFilter
  }

  export type EmployeeOrderByWithRelationInput = {
    employee_id?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    company_id?: SortOrderInput | SortOrder
    start_train_date?: SortOrder
    start_income_date?: SortOrder
    start_10k_date?: SortOrder
    worker_type?: SortOrder
    wage_rate?: SortOrder
    rate_type?: SortOrder
    company?: CompanyOrderByWithRelationInput
    leaves?: LeaveOrderByRelationAggregateInput
    payrolls?: PayrollOrderByRelationAggregateInput
    payroll_temps?: PayrollTempOrderByRelationAggregateInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    employee_id?: string
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    lastName?: StringFilter<"Employee"> | string
    firstName?: StringFilter<"Employee"> | string
    middleName?: StringNullableFilter<"Employee"> | string | null
    company_id?: IntNullableFilter<"Employee"> | number | null
    start_train_date?: DateTimeFilter<"Employee"> | Date | string
    start_income_date?: DateTimeFilter<"Employee"> | Date | string
    start_10k_date?: DateTimeFilter<"Employee"> | Date | string
    worker_type?: StringFilter<"Employee"> | string
    wage_rate?: FloatFilter<"Employee"> | number
    rate_type?: StringFilter<"Employee"> | string
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    leaves?: LeaveListRelationFilter
    payrolls?: PayrollListRelationFilter
    payroll_temps?: PayrollTempListRelationFilter
  }, "employee_id">

  export type EmployeeOrderByWithAggregationInput = {
    employee_id?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    company_id?: SortOrderInput | SortOrder
    start_train_date?: SortOrder
    start_income_date?: SortOrder
    start_10k_date?: SortOrder
    worker_type?: SortOrder
    wage_rate?: SortOrder
    rate_type?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    employee_id?: StringWithAggregatesFilter<"Employee"> | string
    lastName?: StringWithAggregatesFilter<"Employee"> | string
    firstName?: StringWithAggregatesFilter<"Employee"> | string
    middleName?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    company_id?: IntNullableWithAggregatesFilter<"Employee"> | number | null
    start_train_date?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    start_income_date?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    start_10k_date?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    worker_type?: StringWithAggregatesFilter<"Employee"> | string
    wage_rate?: FloatWithAggregatesFilter<"Employee"> | number
    rate_type?: StringWithAggregatesFilter<"Employee"> | string
  }

  export type LeaveWhereInput = {
    AND?: LeaveWhereInput | LeaveWhereInput[]
    OR?: LeaveWhereInput[]
    NOT?: LeaveWhereInput | LeaveWhereInput[]
    leave_id?: IntFilter<"Leave"> | number
    employee_id?: StringFilter<"Leave"> | string
    start_leave?: DateTimeNullableFilter<"Leave"> | Date | string | null
    end_leave?: DateTimeNullableFilter<"Leave"> | Date | string | null
    total_days?: IntNullableFilter<"Leave"> | number | null
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type LeaveOrderByWithRelationInput = {
    leave_id?: SortOrder
    employee_id?: SortOrder
    start_leave?: SortOrderInput | SortOrder
    end_leave?: SortOrderInput | SortOrder
    total_days?: SortOrderInput | SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type LeaveWhereUniqueInput = Prisma.AtLeast<{
    leave_id?: number
    AND?: LeaveWhereInput | LeaveWhereInput[]
    OR?: LeaveWhereInput[]
    NOT?: LeaveWhereInput | LeaveWhereInput[]
    employee_id?: StringFilter<"Leave"> | string
    start_leave?: DateTimeNullableFilter<"Leave"> | Date | string | null
    end_leave?: DateTimeNullableFilter<"Leave"> | Date | string | null
    total_days?: IntNullableFilter<"Leave"> | number | null
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "leave_id">

  export type LeaveOrderByWithAggregationInput = {
    leave_id?: SortOrder
    employee_id?: SortOrder
    start_leave?: SortOrderInput | SortOrder
    end_leave?: SortOrderInput | SortOrder
    total_days?: SortOrderInput | SortOrder
    _count?: LeaveCountOrderByAggregateInput
    _avg?: LeaveAvgOrderByAggregateInput
    _max?: LeaveMaxOrderByAggregateInput
    _min?: LeaveMinOrderByAggregateInput
    _sum?: LeaveSumOrderByAggregateInput
  }

  export type LeaveScalarWhereWithAggregatesInput = {
    AND?: LeaveScalarWhereWithAggregatesInput | LeaveScalarWhereWithAggregatesInput[]
    OR?: LeaveScalarWhereWithAggregatesInput[]
    NOT?: LeaveScalarWhereWithAggregatesInput | LeaveScalarWhereWithAggregatesInput[]
    leave_id?: IntWithAggregatesFilter<"Leave"> | number
    employee_id?: StringWithAggregatesFilter<"Leave"> | string
    start_leave?: DateTimeNullableWithAggregatesFilter<"Leave"> | Date | string | null
    end_leave?: DateTimeNullableWithAggregatesFilter<"Leave"> | Date | string | null
    total_days?: IntNullableWithAggregatesFilter<"Leave"> | number | null
  }

  export type PayrollWhereInput = {
    AND?: PayrollWhereInput | PayrollWhereInput[]
    OR?: PayrollWhereInput[]
    NOT?: PayrollWhereInput | PayrollWhereInput[]
    payroll_id?: IntFilter<"Payroll"> | number
    employee_id?: StringFilter<"Payroll"> | string
    payroll_range?: DateTimeFilter<"Payroll"> | Date | string
    payroll_date?: DateTimeFilter<"Payroll"> | Date | string
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    payamounts?: PayrollAmountListRelationFilter
  }

  export type PayrollOrderByWithRelationInput = {
    payroll_id?: SortOrder
    employee_id?: SortOrder
    payroll_range?: SortOrder
    payroll_date?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    payamounts?: PayrollAmountOrderByRelationAggregateInput
  }

  export type PayrollWhereUniqueInput = Prisma.AtLeast<{
    payroll_id?: number
    AND?: PayrollWhereInput | PayrollWhereInput[]
    OR?: PayrollWhereInput[]
    NOT?: PayrollWhereInput | PayrollWhereInput[]
    employee_id?: StringFilter<"Payroll"> | string
    payroll_range?: DateTimeFilter<"Payroll"> | Date | string
    payroll_date?: DateTimeFilter<"Payroll"> | Date | string
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    payamounts?: PayrollAmountListRelationFilter
  }, "payroll_id">

  export type PayrollOrderByWithAggregationInput = {
    payroll_id?: SortOrder
    employee_id?: SortOrder
    payroll_range?: SortOrder
    payroll_date?: SortOrder
    _count?: PayrollCountOrderByAggregateInput
    _avg?: PayrollAvgOrderByAggregateInput
    _max?: PayrollMaxOrderByAggregateInput
    _min?: PayrollMinOrderByAggregateInput
    _sum?: PayrollSumOrderByAggregateInput
  }

  export type PayrollScalarWhereWithAggregatesInput = {
    AND?: PayrollScalarWhereWithAggregatesInput | PayrollScalarWhereWithAggregatesInput[]
    OR?: PayrollScalarWhereWithAggregatesInput[]
    NOT?: PayrollScalarWhereWithAggregatesInput | PayrollScalarWhereWithAggregatesInput[]
    payroll_id?: IntWithAggregatesFilter<"Payroll"> | number
    employee_id?: StringWithAggregatesFilter<"Payroll"> | string
    payroll_range?: DateTimeWithAggregatesFilter<"Payroll"> | Date | string
    payroll_date?: DateTimeWithAggregatesFilter<"Payroll"> | Date | string
  }

  export type PayrollAmountWhereInput = {
    AND?: PayrollAmountWhereInput | PayrollAmountWhereInput[]
    OR?: PayrollAmountWhereInput[]
    NOT?: PayrollAmountWhereInput | PayrollAmountWhereInput[]
    payamount_id?: IntFilter<"PayrollAmount"> | number
    payroll_id?: IntFilter<"PayrollAmount"> | number
    gross_amount?: FloatFilter<"PayrollAmount"> | number
    work_share?: FloatNullableFilter<"PayrollAmount"> | number | null
    conversion_rate?: FloatNullableFilter<"PayrollAmount"> | number | null
    payroll?: XOR<PayrollRelationFilter, PayrollWhereInput>
  }

  export type PayrollAmountOrderByWithRelationInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrderInput | SortOrder
    conversion_rate?: SortOrderInput | SortOrder
    payroll?: PayrollOrderByWithRelationInput
  }

  export type PayrollAmountWhereUniqueInput = Prisma.AtLeast<{
    payamount_id?: number
    AND?: PayrollAmountWhereInput | PayrollAmountWhereInput[]
    OR?: PayrollAmountWhereInput[]
    NOT?: PayrollAmountWhereInput | PayrollAmountWhereInput[]
    payroll_id?: IntFilter<"PayrollAmount"> | number
    gross_amount?: FloatFilter<"PayrollAmount"> | number
    work_share?: FloatNullableFilter<"PayrollAmount"> | number | null
    conversion_rate?: FloatNullableFilter<"PayrollAmount"> | number | null
    payroll?: XOR<PayrollRelationFilter, PayrollWhereInput>
  }, "payamount_id">

  export type PayrollAmountOrderByWithAggregationInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrderInput | SortOrder
    conversion_rate?: SortOrderInput | SortOrder
    _count?: PayrollAmountCountOrderByAggregateInput
    _avg?: PayrollAmountAvgOrderByAggregateInput
    _max?: PayrollAmountMaxOrderByAggregateInput
    _min?: PayrollAmountMinOrderByAggregateInput
    _sum?: PayrollAmountSumOrderByAggregateInput
  }

  export type PayrollAmountScalarWhereWithAggregatesInput = {
    AND?: PayrollAmountScalarWhereWithAggregatesInput | PayrollAmountScalarWhereWithAggregatesInput[]
    OR?: PayrollAmountScalarWhereWithAggregatesInput[]
    NOT?: PayrollAmountScalarWhereWithAggregatesInput | PayrollAmountScalarWhereWithAggregatesInput[]
    payamount_id?: IntWithAggregatesFilter<"PayrollAmount"> | number
    payroll_id?: IntWithAggregatesFilter<"PayrollAmount"> | number
    gross_amount?: FloatWithAggregatesFilter<"PayrollAmount"> | number
    work_share?: FloatNullableWithAggregatesFilter<"PayrollAmount"> | number | null
    conversion_rate?: FloatNullableWithAggregatesFilter<"PayrollAmount"> | number | null
  }

  export type PayrollTempWhereInput = {
    AND?: PayrollTempWhereInput | PayrollTempWhereInput[]
    OR?: PayrollTempWhereInput[]
    NOT?: PayrollTempWhereInput | PayrollTempWhereInput[]
    payroll_id?: IntFilter<"PayrollTemp"> | number
    employee_id?: StringFilter<"PayrollTemp"> | string
    payroll_range?: DateTimeFilter<"PayrollTemp"> | Date | string
    payroll_date?: DateTimeFilter<"PayrollTemp"> | Date | string
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    payamounts?: PayrollAmountTempListRelationFilter
  }

  export type PayrollTempOrderByWithRelationInput = {
    payroll_id?: SortOrder
    employee_id?: SortOrder
    payroll_range?: SortOrder
    payroll_date?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    payamounts?: PayrollAmountTempOrderByRelationAggregateInput
  }

  export type PayrollTempWhereUniqueInput = Prisma.AtLeast<{
    payroll_id?: number
    AND?: PayrollTempWhereInput | PayrollTempWhereInput[]
    OR?: PayrollTempWhereInput[]
    NOT?: PayrollTempWhereInput | PayrollTempWhereInput[]
    employee_id?: StringFilter<"PayrollTemp"> | string
    payroll_range?: DateTimeFilter<"PayrollTemp"> | Date | string
    payroll_date?: DateTimeFilter<"PayrollTemp"> | Date | string
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    payamounts?: PayrollAmountTempListRelationFilter
  }, "payroll_id">

  export type PayrollTempOrderByWithAggregationInput = {
    payroll_id?: SortOrder
    employee_id?: SortOrder
    payroll_range?: SortOrder
    payroll_date?: SortOrder
    _count?: PayrollTempCountOrderByAggregateInput
    _avg?: PayrollTempAvgOrderByAggregateInput
    _max?: PayrollTempMaxOrderByAggregateInput
    _min?: PayrollTempMinOrderByAggregateInput
    _sum?: PayrollTempSumOrderByAggregateInput
  }

  export type PayrollTempScalarWhereWithAggregatesInput = {
    AND?: PayrollTempScalarWhereWithAggregatesInput | PayrollTempScalarWhereWithAggregatesInput[]
    OR?: PayrollTempScalarWhereWithAggregatesInput[]
    NOT?: PayrollTempScalarWhereWithAggregatesInput | PayrollTempScalarWhereWithAggregatesInput[]
    payroll_id?: IntWithAggregatesFilter<"PayrollTemp"> | number
    employee_id?: StringWithAggregatesFilter<"PayrollTemp"> | string
    payroll_range?: DateTimeWithAggregatesFilter<"PayrollTemp"> | Date | string
    payroll_date?: DateTimeWithAggregatesFilter<"PayrollTemp"> | Date | string
  }

  export type PayrollAmountTempWhereInput = {
    AND?: PayrollAmountTempWhereInput | PayrollAmountTempWhereInput[]
    OR?: PayrollAmountTempWhereInput[]
    NOT?: PayrollAmountTempWhereInput | PayrollAmountTempWhereInput[]
    payamount_id?: IntFilter<"PayrollAmountTemp"> | number
    payroll_id?: IntFilter<"PayrollAmountTemp"> | number
    gross_amount?: FloatFilter<"PayrollAmountTemp"> | number
    work_share?: FloatNullableFilter<"PayrollAmountTemp"> | number | null
    conversion_rate?: FloatNullableFilter<"PayrollAmountTemp"> | number | null
    payroll_temp?: XOR<PayrollTempRelationFilter, PayrollTempWhereInput>
  }

  export type PayrollAmountTempOrderByWithRelationInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrderInput | SortOrder
    conversion_rate?: SortOrderInput | SortOrder
    payroll_temp?: PayrollTempOrderByWithRelationInput
  }

  export type PayrollAmountTempWhereUniqueInput = Prisma.AtLeast<{
    payamount_id?: number
    AND?: PayrollAmountTempWhereInput | PayrollAmountTempWhereInput[]
    OR?: PayrollAmountTempWhereInput[]
    NOT?: PayrollAmountTempWhereInput | PayrollAmountTempWhereInput[]
    payroll_id?: IntFilter<"PayrollAmountTemp"> | number
    gross_amount?: FloatFilter<"PayrollAmountTemp"> | number
    work_share?: FloatNullableFilter<"PayrollAmountTemp"> | number | null
    conversion_rate?: FloatNullableFilter<"PayrollAmountTemp"> | number | null
    payroll_temp?: XOR<PayrollTempRelationFilter, PayrollTempWhereInput>
  }, "payamount_id">

  export type PayrollAmountTempOrderByWithAggregationInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrderInput | SortOrder
    conversion_rate?: SortOrderInput | SortOrder
    _count?: PayrollAmountTempCountOrderByAggregateInput
    _avg?: PayrollAmountTempAvgOrderByAggregateInput
    _max?: PayrollAmountTempMaxOrderByAggregateInput
    _min?: PayrollAmountTempMinOrderByAggregateInput
    _sum?: PayrollAmountTempSumOrderByAggregateInput
  }

  export type PayrollAmountTempScalarWhereWithAggregatesInput = {
    AND?: PayrollAmountTempScalarWhereWithAggregatesInput | PayrollAmountTempScalarWhereWithAggregatesInput[]
    OR?: PayrollAmountTempScalarWhereWithAggregatesInput[]
    NOT?: PayrollAmountTempScalarWhereWithAggregatesInput | PayrollAmountTempScalarWhereWithAggregatesInput[]
    payamount_id?: IntWithAggregatesFilter<"PayrollAmountTemp"> | number
    payroll_id?: IntWithAggregatesFilter<"PayrollAmountTemp"> | number
    gross_amount?: FloatWithAggregatesFilter<"PayrollAmountTemp"> | number
    work_share?: FloatNullableWithAggregatesFilter<"PayrollAmountTemp"> | number | null
    conversion_rate?: FloatNullableWithAggregatesFilter<"PayrollAmountTemp"> | number | null
  }

  export type CompanyCreateInput = {
    company_name: string
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    company_id?: number
    company_name: string
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    company_name?: StringFieldUpdateOperationsInput | string
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    company_id?: IntFieldUpdateOperationsInput | number
    company_name?: StringFieldUpdateOperationsInput | string
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    company_id?: number
    company_name: string
  }

  export type CompanyUpdateManyMutationInput = {
    company_name?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    company_id?: IntFieldUpdateOperationsInput | number
    company_name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentCreateInput = {
    department_name: string
    company: CompanyCreateNestedOneWithoutDepartmentsInput
  }

  export type DepartmentUncheckedCreateInput = {
    department_id?: number
    department_name: string
    company_id: number
  }

  export type DepartmentUpdateInput = {
    department_name?: StringFieldUpdateOperationsInput | string
    company?: CompanyUpdateOneRequiredWithoutDepartmentsNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentCreateManyInput = {
    department_id?: number
    department_name: string
    company_id: number
  }

  export type DepartmentUpdateManyMutationInput = {
    department_name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeCreateInput = {
    employee_id: string
    lastName: string
    firstName: string
    middleName?: string | null
    start_train_date: Date | string
    start_income_date: Date | string
    start_10k_date: Date | string
    worker_type: string
    wage_rate: number
    rate_type: string
    company?: CompanyCreateNestedOneWithoutEmployeesInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    payroll_temps?: PayrollTempCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    employee_id: string
    lastName: string
    firstName: string
    middleName?: string | null
    company_id?: number | null
    start_train_date: Date | string
    start_income_date: Date | string
    start_10k_date: Date | string
    worker_type: string
    wage_rate: number
    rate_type: string
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    payroll_temps?: PayrollTempUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUpdateInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    start_train_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_income_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_10k_date?: DateTimeFieldUpdateOperationsInput | Date | string
    worker_type?: StringFieldUpdateOperationsInput | string
    wage_rate?: FloatFieldUpdateOperationsInput | number
    rate_type?: StringFieldUpdateOperationsInput | string
    company?: CompanyUpdateOneWithoutEmployeesNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    payroll_temps?: PayrollTempUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_train_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_income_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_10k_date?: DateTimeFieldUpdateOperationsInput | Date | string
    worker_type?: StringFieldUpdateOperationsInput | string
    wage_rate?: FloatFieldUpdateOperationsInput | number
    rate_type?: StringFieldUpdateOperationsInput | string
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    payroll_temps?: PayrollTempUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateManyInput = {
    employee_id: string
    lastName: string
    firstName: string
    middleName?: string | null
    company_id?: number | null
    start_train_date: Date | string
    start_income_date: Date | string
    start_10k_date: Date | string
    worker_type: string
    wage_rate: number
    rate_type: string
  }

  export type EmployeeUpdateManyMutationInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    start_train_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_income_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_10k_date?: DateTimeFieldUpdateOperationsInput | Date | string
    worker_type?: StringFieldUpdateOperationsInput | string
    wage_rate?: FloatFieldUpdateOperationsInput | number
    rate_type?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeUncheckedUpdateManyInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_train_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_income_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_10k_date?: DateTimeFieldUpdateOperationsInput | Date | string
    worker_type?: StringFieldUpdateOperationsInput | string
    wage_rate?: FloatFieldUpdateOperationsInput | number
    rate_type?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveCreateInput = {
    start_leave?: Date | string | null
    end_leave?: Date | string | null
    total_days?: number | null
    employee: EmployeeCreateNestedOneWithoutLeavesInput
  }

  export type LeaveUncheckedCreateInput = {
    leave_id?: number
    employee_id: string
    start_leave?: Date | string | null
    end_leave?: Date | string | null
    total_days?: number | null
  }

  export type LeaveUpdateInput = {
    start_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_days?: NullableIntFieldUpdateOperationsInput | number | null
    employee?: EmployeeUpdateOneRequiredWithoutLeavesNestedInput
  }

  export type LeaveUncheckedUpdateInput = {
    leave_id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    start_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_days?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LeaveCreateManyInput = {
    leave_id?: number
    employee_id: string
    start_leave?: Date | string | null
    end_leave?: Date | string | null
    total_days?: number | null
  }

  export type LeaveUpdateManyMutationInput = {
    start_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_days?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LeaveUncheckedUpdateManyInput = {
    leave_id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    start_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_days?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PayrollCreateInput = {
    payroll_range: Date | string
    payroll_date: Date | string
    employee: EmployeeCreateNestedOneWithoutPayrollsInput
    payamounts?: PayrollAmountCreateNestedManyWithoutPayrollInput
  }

  export type PayrollUncheckedCreateInput = {
    payroll_id?: number
    employee_id: string
    payroll_range: Date | string
    payroll_date: Date | string
    payamounts?: PayrollAmountUncheckedCreateNestedManyWithoutPayrollInput
  }

  export type PayrollUpdateInput = {
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPayrollsNestedInput
    payamounts?: PayrollAmountUpdateManyWithoutPayrollNestedInput
  }

  export type PayrollUncheckedUpdateInput = {
    payroll_id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payamounts?: PayrollAmountUncheckedUpdateManyWithoutPayrollNestedInput
  }

  export type PayrollCreateManyInput = {
    payroll_id?: number
    employee_id: string
    payroll_range: Date | string
    payroll_date: Date | string
  }

  export type PayrollUpdateManyMutationInput = {
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollUncheckedUpdateManyInput = {
    payroll_id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollAmountCreateInput = {
    gross_amount: number
    work_share?: number | null
    conversion_rate?: number | null
    payroll: PayrollCreateNestedOneWithoutPayamountsInput
  }

  export type PayrollAmountUncheckedCreateInput = {
    payamount_id?: number
    payroll_id: number
    gross_amount: number
    work_share?: number | null
    conversion_rate?: number | null
  }

  export type PayrollAmountUpdateInput = {
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
    payroll?: PayrollUpdateOneRequiredWithoutPayamountsNestedInput
  }

  export type PayrollAmountUncheckedUpdateInput = {
    payamount_id?: IntFieldUpdateOperationsInput | number
    payroll_id?: IntFieldUpdateOperationsInput | number
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PayrollAmountCreateManyInput = {
    payamount_id?: number
    payroll_id: number
    gross_amount: number
    work_share?: number | null
    conversion_rate?: number | null
  }

  export type PayrollAmountUpdateManyMutationInput = {
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PayrollAmountUncheckedUpdateManyInput = {
    payamount_id?: IntFieldUpdateOperationsInput | number
    payroll_id?: IntFieldUpdateOperationsInput | number
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PayrollTempCreateInput = {
    payroll_range: Date | string
    payroll_date: Date | string
    employee: EmployeeCreateNestedOneWithoutPayroll_tempsInput
    payamounts?: PayrollAmountTempCreateNestedManyWithoutPayroll_tempInput
  }

  export type PayrollTempUncheckedCreateInput = {
    payroll_id?: number
    employee_id: string
    payroll_range: Date | string
    payroll_date: Date | string
    payamounts?: PayrollAmountTempUncheckedCreateNestedManyWithoutPayroll_tempInput
  }

  export type PayrollTempUpdateInput = {
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPayroll_tempsNestedInput
    payamounts?: PayrollAmountTempUpdateManyWithoutPayroll_tempNestedInput
  }

  export type PayrollTempUncheckedUpdateInput = {
    payroll_id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payamounts?: PayrollAmountTempUncheckedUpdateManyWithoutPayroll_tempNestedInput
  }

  export type PayrollTempCreateManyInput = {
    payroll_id?: number
    employee_id: string
    payroll_range: Date | string
    payroll_date: Date | string
  }

  export type PayrollTempUpdateManyMutationInput = {
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollTempUncheckedUpdateManyInput = {
    payroll_id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollAmountTempCreateInput = {
    gross_amount: number
    work_share?: number | null
    conversion_rate?: number | null
    payroll_temp: PayrollTempCreateNestedOneWithoutPayamountsInput
  }

  export type PayrollAmountTempUncheckedCreateInput = {
    payamount_id?: number
    payroll_id: number
    gross_amount: number
    work_share?: number | null
    conversion_rate?: number | null
  }

  export type PayrollAmountTempUpdateInput = {
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
    payroll_temp?: PayrollTempUpdateOneRequiredWithoutPayamountsNestedInput
  }

  export type PayrollAmountTempUncheckedUpdateInput = {
    payamount_id?: IntFieldUpdateOperationsInput | number
    payroll_id?: IntFieldUpdateOperationsInput | number
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PayrollAmountTempCreateManyInput = {
    payamount_id?: number
    payroll_id: number
    gross_amount: number
    work_share?: number | null
    conversion_rate?: number | null
  }

  export type PayrollAmountTempUpdateManyMutationInput = {
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PayrollAmountTempUncheckedUpdateManyInput = {
    payamount_id?: IntFieldUpdateOperationsInput | number
    payroll_id?: IntFieldUpdateOperationsInput | number
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    company_id?: SortOrder
    company_name?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    company_id?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    company_id?: SortOrder
    company_name?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    company_id?: SortOrder
    company_name?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    company_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type DepartmentCountOrderByAggregateInput = {
    department_id?: SortOrder
    department_name?: SortOrder
    company_id?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    department_id?: SortOrder
    company_id?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    department_id?: SortOrder
    department_name?: SortOrder
    company_id?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    department_id?: SortOrder
    department_name?: SortOrder
    company_id?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    department_id?: SortOrder
    company_id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CompanyNullableRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type LeaveListRelationFilter = {
    every?: LeaveWhereInput
    some?: LeaveWhereInput
    none?: LeaveWhereInput
  }

  export type PayrollListRelationFilter = {
    every?: PayrollWhereInput
    some?: PayrollWhereInput
    none?: PayrollWhereInput
  }

  export type PayrollTempListRelationFilter = {
    every?: PayrollTempWhereInput
    some?: PayrollTempWhereInput
    none?: PayrollTempWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LeaveOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PayrollOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PayrollTempOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeCountOrderByAggregateInput = {
    employee_id?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    company_id?: SortOrder
    start_train_date?: SortOrder
    start_income_date?: SortOrder
    start_10k_date?: SortOrder
    worker_type?: SortOrder
    wage_rate?: SortOrder
    rate_type?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    company_id?: SortOrder
    wage_rate?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    employee_id?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    company_id?: SortOrder
    start_train_date?: SortOrder
    start_income_date?: SortOrder
    start_10k_date?: SortOrder
    worker_type?: SortOrder
    wage_rate?: SortOrder
    rate_type?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    employee_id?: SortOrder
    lastName?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    company_id?: SortOrder
    start_train_date?: SortOrder
    start_income_date?: SortOrder
    start_10k_date?: SortOrder
    worker_type?: SortOrder
    wage_rate?: SortOrder
    rate_type?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    company_id?: SortOrder
    wage_rate?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EmployeeRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type LeaveCountOrderByAggregateInput = {
    leave_id?: SortOrder
    employee_id?: SortOrder
    start_leave?: SortOrder
    end_leave?: SortOrder
    total_days?: SortOrder
  }

  export type LeaveAvgOrderByAggregateInput = {
    leave_id?: SortOrder
    total_days?: SortOrder
  }

  export type LeaveMaxOrderByAggregateInput = {
    leave_id?: SortOrder
    employee_id?: SortOrder
    start_leave?: SortOrder
    end_leave?: SortOrder
    total_days?: SortOrder
  }

  export type LeaveMinOrderByAggregateInput = {
    leave_id?: SortOrder
    employee_id?: SortOrder
    start_leave?: SortOrder
    end_leave?: SortOrder
    total_days?: SortOrder
  }

  export type LeaveSumOrderByAggregateInput = {
    leave_id?: SortOrder
    total_days?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type PayrollAmountListRelationFilter = {
    every?: PayrollAmountWhereInput
    some?: PayrollAmountWhereInput
    none?: PayrollAmountWhereInput
  }

  export type PayrollAmountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PayrollCountOrderByAggregateInput = {
    payroll_id?: SortOrder
    employee_id?: SortOrder
    payroll_range?: SortOrder
    payroll_date?: SortOrder
  }

  export type PayrollAvgOrderByAggregateInput = {
    payroll_id?: SortOrder
  }

  export type PayrollMaxOrderByAggregateInput = {
    payroll_id?: SortOrder
    employee_id?: SortOrder
    payroll_range?: SortOrder
    payroll_date?: SortOrder
  }

  export type PayrollMinOrderByAggregateInput = {
    payroll_id?: SortOrder
    employee_id?: SortOrder
    payroll_range?: SortOrder
    payroll_date?: SortOrder
  }

  export type PayrollSumOrderByAggregateInput = {
    payroll_id?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type PayrollRelationFilter = {
    is?: PayrollWhereInput
    isNot?: PayrollWhereInput
  }

  export type PayrollAmountCountOrderByAggregateInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrder
    conversion_rate?: SortOrder
  }

  export type PayrollAmountAvgOrderByAggregateInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrder
    conversion_rate?: SortOrder
  }

  export type PayrollAmountMaxOrderByAggregateInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrder
    conversion_rate?: SortOrder
  }

  export type PayrollAmountMinOrderByAggregateInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrder
    conversion_rate?: SortOrder
  }

  export type PayrollAmountSumOrderByAggregateInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrder
    conversion_rate?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type PayrollAmountTempListRelationFilter = {
    every?: PayrollAmountTempWhereInput
    some?: PayrollAmountTempWhereInput
    none?: PayrollAmountTempWhereInput
  }

  export type PayrollAmountTempOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PayrollTempCountOrderByAggregateInput = {
    payroll_id?: SortOrder
    employee_id?: SortOrder
    payroll_range?: SortOrder
    payroll_date?: SortOrder
  }

  export type PayrollTempAvgOrderByAggregateInput = {
    payroll_id?: SortOrder
  }

  export type PayrollTempMaxOrderByAggregateInput = {
    payroll_id?: SortOrder
    employee_id?: SortOrder
    payroll_range?: SortOrder
    payroll_date?: SortOrder
  }

  export type PayrollTempMinOrderByAggregateInput = {
    payroll_id?: SortOrder
    employee_id?: SortOrder
    payroll_range?: SortOrder
    payroll_date?: SortOrder
  }

  export type PayrollTempSumOrderByAggregateInput = {
    payroll_id?: SortOrder
  }

  export type PayrollTempRelationFilter = {
    is?: PayrollTempWhereInput
    isNot?: PayrollTempWhereInput
  }

  export type PayrollAmountTempCountOrderByAggregateInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrder
    conversion_rate?: SortOrder
  }

  export type PayrollAmountTempAvgOrderByAggregateInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrder
    conversion_rate?: SortOrder
  }

  export type PayrollAmountTempMaxOrderByAggregateInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrder
    conversion_rate?: SortOrder
  }

  export type PayrollAmountTempMinOrderByAggregateInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrder
    conversion_rate?: SortOrder
  }

  export type PayrollAmountTempSumOrderByAggregateInput = {
    payamount_id?: SortOrder
    payroll_id?: SortOrder
    gross_amount?: SortOrder
    work_share?: SortOrder
    conversion_rate?: SortOrder
  }

  export type DepartmentCreateNestedManyWithoutCompanyInput = {
    create?: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput> | DepartmentCreateWithoutCompanyInput[] | DepartmentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCompanyInput | DepartmentCreateOrConnectWithoutCompanyInput[]
    createMany?: DepartmentCreateManyCompanyInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type EmployeeCreateNestedManyWithoutCompanyInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput> | DepartmentCreateWithoutCompanyInput[] | DepartmentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCompanyInput | DepartmentCreateOrConnectWithoutCompanyInput[]
    createMany?: DepartmentCreateManyCompanyInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DepartmentUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput> | DepartmentCreateWithoutCompanyInput[] | DepartmentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCompanyInput | DepartmentCreateOrConnectWithoutCompanyInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutCompanyInput | DepartmentUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: DepartmentCreateManyCompanyInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutCompanyInput | DepartmentUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutCompanyInput | DepartmentUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type EmployeeUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutCompanyInput | EmployeeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutCompanyInput | EmployeeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutCompanyInput | EmployeeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DepartmentUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput> | DepartmentCreateWithoutCompanyInput[] | DepartmentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCompanyInput | DepartmentCreateOrConnectWithoutCompanyInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutCompanyInput | DepartmentUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: DepartmentCreateManyCompanyInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutCompanyInput | DepartmentUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutCompanyInput | DepartmentUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput> | EmployeeCreateWithoutCompanyInput[] | EmployeeUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCompanyInput | EmployeeCreateOrConnectWithoutCompanyInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutCompanyInput | EmployeeUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: EmployeeCreateManyCompanyInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutCompanyInput | EmployeeUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutCompanyInput | EmployeeUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<CompanyCreateWithoutDepartmentsInput, CompanyUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDepartmentsInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutDepartmentsNestedInput = {
    create?: XOR<CompanyCreateWithoutDepartmentsInput, CompanyUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDepartmentsInput
    upsert?: CompanyUpsertWithoutDepartmentsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutDepartmentsInput, CompanyUpdateWithoutDepartmentsInput>, CompanyUncheckedUpdateWithoutDepartmentsInput>
  }

  export type CompanyCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmployeesInput
    connect?: CompanyWhereUniqueInput
  }

  export type LeaveCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<LeaveCreateWithoutEmployeeInput, LeaveUncheckedCreateWithoutEmployeeInput> | LeaveCreateWithoutEmployeeInput[] | LeaveUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutEmployeeInput | LeaveCreateOrConnectWithoutEmployeeInput[]
    createMany?: LeaveCreateManyEmployeeInputEnvelope
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
  }

  export type PayrollCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PayrollCreateWithoutEmployeeInput, PayrollUncheckedCreateWithoutEmployeeInput> | PayrollCreateWithoutEmployeeInput[] | PayrollUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutEmployeeInput | PayrollCreateOrConnectWithoutEmployeeInput[]
    createMany?: PayrollCreateManyEmployeeInputEnvelope
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
  }

  export type PayrollTempCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PayrollTempCreateWithoutEmployeeInput, PayrollTempUncheckedCreateWithoutEmployeeInput> | PayrollTempCreateWithoutEmployeeInput[] | PayrollTempUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollTempCreateOrConnectWithoutEmployeeInput | PayrollTempCreateOrConnectWithoutEmployeeInput[]
    createMany?: PayrollTempCreateManyEmployeeInputEnvelope
    connect?: PayrollTempWhereUniqueInput | PayrollTempWhereUniqueInput[]
  }

  export type LeaveUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<LeaveCreateWithoutEmployeeInput, LeaveUncheckedCreateWithoutEmployeeInput> | LeaveCreateWithoutEmployeeInput[] | LeaveUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutEmployeeInput | LeaveCreateOrConnectWithoutEmployeeInput[]
    createMany?: LeaveCreateManyEmployeeInputEnvelope
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
  }

  export type PayrollUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PayrollCreateWithoutEmployeeInput, PayrollUncheckedCreateWithoutEmployeeInput> | PayrollCreateWithoutEmployeeInput[] | PayrollUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutEmployeeInput | PayrollCreateOrConnectWithoutEmployeeInput[]
    createMany?: PayrollCreateManyEmployeeInputEnvelope
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
  }

  export type PayrollTempUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PayrollTempCreateWithoutEmployeeInput, PayrollTempUncheckedCreateWithoutEmployeeInput> | PayrollTempCreateWithoutEmployeeInput[] | PayrollTempUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollTempCreateOrConnectWithoutEmployeeInput | PayrollTempCreateOrConnectWithoutEmployeeInput[]
    createMany?: PayrollTempCreateManyEmployeeInputEnvelope
    connect?: PayrollTempWhereUniqueInput | PayrollTempWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompanyUpdateOneWithoutEmployeesNestedInput = {
    create?: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEmployeesInput
    upsert?: CompanyUpsertWithoutEmployeesInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutEmployeesInput, CompanyUpdateWithoutEmployeesInput>, CompanyUncheckedUpdateWithoutEmployeesInput>
  }

  export type LeaveUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<LeaveCreateWithoutEmployeeInput, LeaveUncheckedCreateWithoutEmployeeInput> | LeaveCreateWithoutEmployeeInput[] | LeaveUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutEmployeeInput | LeaveCreateOrConnectWithoutEmployeeInput[]
    upsert?: LeaveUpsertWithWhereUniqueWithoutEmployeeInput | LeaveUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: LeaveCreateManyEmployeeInputEnvelope
    set?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    disconnect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    delete?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    update?: LeaveUpdateWithWhereUniqueWithoutEmployeeInput | LeaveUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: LeaveUpdateManyWithWhereWithoutEmployeeInput | LeaveUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
  }

  export type PayrollUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PayrollCreateWithoutEmployeeInput, PayrollUncheckedCreateWithoutEmployeeInput> | PayrollCreateWithoutEmployeeInput[] | PayrollUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutEmployeeInput | PayrollCreateOrConnectWithoutEmployeeInput[]
    upsert?: PayrollUpsertWithWhereUniqueWithoutEmployeeInput | PayrollUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PayrollCreateManyEmployeeInputEnvelope
    set?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    disconnect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    delete?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    update?: PayrollUpdateWithWhereUniqueWithoutEmployeeInput | PayrollUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PayrollUpdateManyWithWhereWithoutEmployeeInput | PayrollUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PayrollScalarWhereInput | PayrollScalarWhereInput[]
  }

  export type PayrollTempUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PayrollTempCreateWithoutEmployeeInput, PayrollTempUncheckedCreateWithoutEmployeeInput> | PayrollTempCreateWithoutEmployeeInput[] | PayrollTempUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollTempCreateOrConnectWithoutEmployeeInput | PayrollTempCreateOrConnectWithoutEmployeeInput[]
    upsert?: PayrollTempUpsertWithWhereUniqueWithoutEmployeeInput | PayrollTempUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PayrollTempCreateManyEmployeeInputEnvelope
    set?: PayrollTempWhereUniqueInput | PayrollTempWhereUniqueInput[]
    disconnect?: PayrollTempWhereUniqueInput | PayrollTempWhereUniqueInput[]
    delete?: PayrollTempWhereUniqueInput | PayrollTempWhereUniqueInput[]
    connect?: PayrollTempWhereUniqueInput | PayrollTempWhereUniqueInput[]
    update?: PayrollTempUpdateWithWhereUniqueWithoutEmployeeInput | PayrollTempUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PayrollTempUpdateManyWithWhereWithoutEmployeeInput | PayrollTempUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PayrollTempScalarWhereInput | PayrollTempScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LeaveUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<LeaveCreateWithoutEmployeeInput, LeaveUncheckedCreateWithoutEmployeeInput> | LeaveCreateWithoutEmployeeInput[] | LeaveUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutEmployeeInput | LeaveCreateOrConnectWithoutEmployeeInput[]
    upsert?: LeaveUpsertWithWhereUniqueWithoutEmployeeInput | LeaveUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: LeaveCreateManyEmployeeInputEnvelope
    set?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    disconnect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    delete?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    update?: LeaveUpdateWithWhereUniqueWithoutEmployeeInput | LeaveUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: LeaveUpdateManyWithWhereWithoutEmployeeInput | LeaveUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
  }

  export type PayrollUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PayrollCreateWithoutEmployeeInput, PayrollUncheckedCreateWithoutEmployeeInput> | PayrollCreateWithoutEmployeeInput[] | PayrollUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollCreateOrConnectWithoutEmployeeInput | PayrollCreateOrConnectWithoutEmployeeInput[]
    upsert?: PayrollUpsertWithWhereUniqueWithoutEmployeeInput | PayrollUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PayrollCreateManyEmployeeInputEnvelope
    set?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    disconnect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    delete?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    connect?: PayrollWhereUniqueInput | PayrollWhereUniqueInput[]
    update?: PayrollUpdateWithWhereUniqueWithoutEmployeeInput | PayrollUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PayrollUpdateManyWithWhereWithoutEmployeeInput | PayrollUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PayrollScalarWhereInput | PayrollScalarWhereInput[]
  }

  export type PayrollTempUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PayrollTempCreateWithoutEmployeeInput, PayrollTempUncheckedCreateWithoutEmployeeInput> | PayrollTempCreateWithoutEmployeeInput[] | PayrollTempUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PayrollTempCreateOrConnectWithoutEmployeeInput | PayrollTempCreateOrConnectWithoutEmployeeInput[]
    upsert?: PayrollTempUpsertWithWhereUniqueWithoutEmployeeInput | PayrollTempUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PayrollTempCreateManyEmployeeInputEnvelope
    set?: PayrollTempWhereUniqueInput | PayrollTempWhereUniqueInput[]
    disconnect?: PayrollTempWhereUniqueInput | PayrollTempWhereUniqueInput[]
    delete?: PayrollTempWhereUniqueInput | PayrollTempWhereUniqueInput[]
    connect?: PayrollTempWhereUniqueInput | PayrollTempWhereUniqueInput[]
    update?: PayrollTempUpdateWithWhereUniqueWithoutEmployeeInput | PayrollTempUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PayrollTempUpdateManyWithWhereWithoutEmployeeInput | PayrollTempUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PayrollTempScalarWhereInput | PayrollTempScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutLeavesInput = {
    create?: XOR<EmployeeCreateWithoutLeavesInput, EmployeeUncheckedCreateWithoutLeavesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeavesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EmployeeUpdateOneRequiredWithoutLeavesNestedInput = {
    create?: XOR<EmployeeCreateWithoutLeavesInput, EmployeeUncheckedCreateWithoutLeavesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeavesInput
    upsert?: EmployeeUpsertWithoutLeavesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutLeavesInput, EmployeeUpdateWithoutLeavesInput>, EmployeeUncheckedUpdateWithoutLeavesInput>
  }

  export type EmployeeCreateNestedOneWithoutPayrollsInput = {
    create?: XOR<EmployeeCreateWithoutPayrollsInput, EmployeeUncheckedCreateWithoutPayrollsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPayrollsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PayrollAmountCreateNestedManyWithoutPayrollInput = {
    create?: XOR<PayrollAmountCreateWithoutPayrollInput, PayrollAmountUncheckedCreateWithoutPayrollInput> | PayrollAmountCreateWithoutPayrollInput[] | PayrollAmountUncheckedCreateWithoutPayrollInput[]
    connectOrCreate?: PayrollAmountCreateOrConnectWithoutPayrollInput | PayrollAmountCreateOrConnectWithoutPayrollInput[]
    createMany?: PayrollAmountCreateManyPayrollInputEnvelope
    connect?: PayrollAmountWhereUniqueInput | PayrollAmountWhereUniqueInput[]
  }

  export type PayrollAmountUncheckedCreateNestedManyWithoutPayrollInput = {
    create?: XOR<PayrollAmountCreateWithoutPayrollInput, PayrollAmountUncheckedCreateWithoutPayrollInput> | PayrollAmountCreateWithoutPayrollInput[] | PayrollAmountUncheckedCreateWithoutPayrollInput[]
    connectOrCreate?: PayrollAmountCreateOrConnectWithoutPayrollInput | PayrollAmountCreateOrConnectWithoutPayrollInput[]
    createMany?: PayrollAmountCreateManyPayrollInputEnvelope
    connect?: PayrollAmountWhereUniqueInput | PayrollAmountWhereUniqueInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutPayrollsNestedInput = {
    create?: XOR<EmployeeCreateWithoutPayrollsInput, EmployeeUncheckedCreateWithoutPayrollsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPayrollsInput
    upsert?: EmployeeUpsertWithoutPayrollsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutPayrollsInput, EmployeeUpdateWithoutPayrollsInput>, EmployeeUncheckedUpdateWithoutPayrollsInput>
  }

  export type PayrollAmountUpdateManyWithoutPayrollNestedInput = {
    create?: XOR<PayrollAmountCreateWithoutPayrollInput, PayrollAmountUncheckedCreateWithoutPayrollInput> | PayrollAmountCreateWithoutPayrollInput[] | PayrollAmountUncheckedCreateWithoutPayrollInput[]
    connectOrCreate?: PayrollAmountCreateOrConnectWithoutPayrollInput | PayrollAmountCreateOrConnectWithoutPayrollInput[]
    upsert?: PayrollAmountUpsertWithWhereUniqueWithoutPayrollInput | PayrollAmountUpsertWithWhereUniqueWithoutPayrollInput[]
    createMany?: PayrollAmountCreateManyPayrollInputEnvelope
    set?: PayrollAmountWhereUniqueInput | PayrollAmountWhereUniqueInput[]
    disconnect?: PayrollAmountWhereUniqueInput | PayrollAmountWhereUniqueInput[]
    delete?: PayrollAmountWhereUniqueInput | PayrollAmountWhereUniqueInput[]
    connect?: PayrollAmountWhereUniqueInput | PayrollAmountWhereUniqueInput[]
    update?: PayrollAmountUpdateWithWhereUniqueWithoutPayrollInput | PayrollAmountUpdateWithWhereUniqueWithoutPayrollInput[]
    updateMany?: PayrollAmountUpdateManyWithWhereWithoutPayrollInput | PayrollAmountUpdateManyWithWhereWithoutPayrollInput[]
    deleteMany?: PayrollAmountScalarWhereInput | PayrollAmountScalarWhereInput[]
  }

  export type PayrollAmountUncheckedUpdateManyWithoutPayrollNestedInput = {
    create?: XOR<PayrollAmountCreateWithoutPayrollInput, PayrollAmountUncheckedCreateWithoutPayrollInput> | PayrollAmountCreateWithoutPayrollInput[] | PayrollAmountUncheckedCreateWithoutPayrollInput[]
    connectOrCreate?: PayrollAmountCreateOrConnectWithoutPayrollInput | PayrollAmountCreateOrConnectWithoutPayrollInput[]
    upsert?: PayrollAmountUpsertWithWhereUniqueWithoutPayrollInput | PayrollAmountUpsertWithWhereUniqueWithoutPayrollInput[]
    createMany?: PayrollAmountCreateManyPayrollInputEnvelope
    set?: PayrollAmountWhereUniqueInput | PayrollAmountWhereUniqueInput[]
    disconnect?: PayrollAmountWhereUniqueInput | PayrollAmountWhereUniqueInput[]
    delete?: PayrollAmountWhereUniqueInput | PayrollAmountWhereUniqueInput[]
    connect?: PayrollAmountWhereUniqueInput | PayrollAmountWhereUniqueInput[]
    update?: PayrollAmountUpdateWithWhereUniqueWithoutPayrollInput | PayrollAmountUpdateWithWhereUniqueWithoutPayrollInput[]
    updateMany?: PayrollAmountUpdateManyWithWhereWithoutPayrollInput | PayrollAmountUpdateManyWithWhereWithoutPayrollInput[]
    deleteMany?: PayrollAmountScalarWhereInput | PayrollAmountScalarWhereInput[]
  }

  export type PayrollCreateNestedOneWithoutPayamountsInput = {
    create?: XOR<PayrollCreateWithoutPayamountsInput, PayrollUncheckedCreateWithoutPayamountsInput>
    connectOrCreate?: PayrollCreateOrConnectWithoutPayamountsInput
    connect?: PayrollWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PayrollUpdateOneRequiredWithoutPayamountsNestedInput = {
    create?: XOR<PayrollCreateWithoutPayamountsInput, PayrollUncheckedCreateWithoutPayamountsInput>
    connectOrCreate?: PayrollCreateOrConnectWithoutPayamountsInput
    upsert?: PayrollUpsertWithoutPayamountsInput
    connect?: PayrollWhereUniqueInput
    update?: XOR<XOR<PayrollUpdateToOneWithWhereWithoutPayamountsInput, PayrollUpdateWithoutPayamountsInput>, PayrollUncheckedUpdateWithoutPayamountsInput>
  }

  export type EmployeeCreateNestedOneWithoutPayroll_tempsInput = {
    create?: XOR<EmployeeCreateWithoutPayroll_tempsInput, EmployeeUncheckedCreateWithoutPayroll_tempsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPayroll_tempsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PayrollAmountTempCreateNestedManyWithoutPayroll_tempInput = {
    create?: XOR<PayrollAmountTempCreateWithoutPayroll_tempInput, PayrollAmountTempUncheckedCreateWithoutPayroll_tempInput> | PayrollAmountTempCreateWithoutPayroll_tempInput[] | PayrollAmountTempUncheckedCreateWithoutPayroll_tempInput[]
    connectOrCreate?: PayrollAmountTempCreateOrConnectWithoutPayroll_tempInput | PayrollAmountTempCreateOrConnectWithoutPayroll_tempInput[]
    createMany?: PayrollAmountTempCreateManyPayroll_tempInputEnvelope
    connect?: PayrollAmountTempWhereUniqueInput | PayrollAmountTempWhereUniqueInput[]
  }

  export type PayrollAmountTempUncheckedCreateNestedManyWithoutPayroll_tempInput = {
    create?: XOR<PayrollAmountTempCreateWithoutPayroll_tempInput, PayrollAmountTempUncheckedCreateWithoutPayroll_tempInput> | PayrollAmountTempCreateWithoutPayroll_tempInput[] | PayrollAmountTempUncheckedCreateWithoutPayroll_tempInput[]
    connectOrCreate?: PayrollAmountTempCreateOrConnectWithoutPayroll_tempInput | PayrollAmountTempCreateOrConnectWithoutPayroll_tempInput[]
    createMany?: PayrollAmountTempCreateManyPayroll_tempInputEnvelope
    connect?: PayrollAmountTempWhereUniqueInput | PayrollAmountTempWhereUniqueInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutPayroll_tempsNestedInput = {
    create?: XOR<EmployeeCreateWithoutPayroll_tempsInput, EmployeeUncheckedCreateWithoutPayroll_tempsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPayroll_tempsInput
    upsert?: EmployeeUpsertWithoutPayroll_tempsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutPayroll_tempsInput, EmployeeUpdateWithoutPayroll_tempsInput>, EmployeeUncheckedUpdateWithoutPayroll_tempsInput>
  }

  export type PayrollAmountTempUpdateManyWithoutPayroll_tempNestedInput = {
    create?: XOR<PayrollAmountTempCreateWithoutPayroll_tempInput, PayrollAmountTempUncheckedCreateWithoutPayroll_tempInput> | PayrollAmountTempCreateWithoutPayroll_tempInput[] | PayrollAmountTempUncheckedCreateWithoutPayroll_tempInput[]
    connectOrCreate?: PayrollAmountTempCreateOrConnectWithoutPayroll_tempInput | PayrollAmountTempCreateOrConnectWithoutPayroll_tempInput[]
    upsert?: PayrollAmountTempUpsertWithWhereUniqueWithoutPayroll_tempInput | PayrollAmountTempUpsertWithWhereUniqueWithoutPayroll_tempInput[]
    createMany?: PayrollAmountTempCreateManyPayroll_tempInputEnvelope
    set?: PayrollAmountTempWhereUniqueInput | PayrollAmountTempWhereUniqueInput[]
    disconnect?: PayrollAmountTempWhereUniqueInput | PayrollAmountTempWhereUniqueInput[]
    delete?: PayrollAmountTempWhereUniqueInput | PayrollAmountTempWhereUniqueInput[]
    connect?: PayrollAmountTempWhereUniqueInput | PayrollAmountTempWhereUniqueInput[]
    update?: PayrollAmountTempUpdateWithWhereUniqueWithoutPayroll_tempInput | PayrollAmountTempUpdateWithWhereUniqueWithoutPayroll_tempInput[]
    updateMany?: PayrollAmountTempUpdateManyWithWhereWithoutPayroll_tempInput | PayrollAmountTempUpdateManyWithWhereWithoutPayroll_tempInput[]
    deleteMany?: PayrollAmountTempScalarWhereInput | PayrollAmountTempScalarWhereInput[]
  }

  export type PayrollAmountTempUncheckedUpdateManyWithoutPayroll_tempNestedInput = {
    create?: XOR<PayrollAmountTempCreateWithoutPayroll_tempInput, PayrollAmountTempUncheckedCreateWithoutPayroll_tempInput> | PayrollAmountTempCreateWithoutPayroll_tempInput[] | PayrollAmountTempUncheckedCreateWithoutPayroll_tempInput[]
    connectOrCreate?: PayrollAmountTempCreateOrConnectWithoutPayroll_tempInput | PayrollAmountTempCreateOrConnectWithoutPayroll_tempInput[]
    upsert?: PayrollAmountTempUpsertWithWhereUniqueWithoutPayroll_tempInput | PayrollAmountTempUpsertWithWhereUniqueWithoutPayroll_tempInput[]
    createMany?: PayrollAmountTempCreateManyPayroll_tempInputEnvelope
    set?: PayrollAmountTempWhereUniqueInput | PayrollAmountTempWhereUniqueInput[]
    disconnect?: PayrollAmountTempWhereUniqueInput | PayrollAmountTempWhereUniqueInput[]
    delete?: PayrollAmountTempWhereUniqueInput | PayrollAmountTempWhereUniqueInput[]
    connect?: PayrollAmountTempWhereUniqueInput | PayrollAmountTempWhereUniqueInput[]
    update?: PayrollAmountTempUpdateWithWhereUniqueWithoutPayroll_tempInput | PayrollAmountTempUpdateWithWhereUniqueWithoutPayroll_tempInput[]
    updateMany?: PayrollAmountTempUpdateManyWithWhereWithoutPayroll_tempInput | PayrollAmountTempUpdateManyWithWhereWithoutPayroll_tempInput[]
    deleteMany?: PayrollAmountTempScalarWhereInput | PayrollAmountTempScalarWhereInput[]
  }

  export type PayrollTempCreateNestedOneWithoutPayamountsInput = {
    create?: XOR<PayrollTempCreateWithoutPayamountsInput, PayrollTempUncheckedCreateWithoutPayamountsInput>
    connectOrCreate?: PayrollTempCreateOrConnectWithoutPayamountsInput
    connect?: PayrollTempWhereUniqueInput
  }

  export type PayrollTempUpdateOneRequiredWithoutPayamountsNestedInput = {
    create?: XOR<PayrollTempCreateWithoutPayamountsInput, PayrollTempUncheckedCreateWithoutPayamountsInput>
    connectOrCreate?: PayrollTempCreateOrConnectWithoutPayamountsInput
    upsert?: PayrollTempUpsertWithoutPayamountsInput
    connect?: PayrollTempWhereUniqueInput
    update?: XOR<XOR<PayrollTempUpdateToOneWithWhereWithoutPayamountsInput, PayrollTempUpdateWithoutPayamountsInput>, PayrollTempUncheckedUpdateWithoutPayamountsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DepartmentCreateWithoutCompanyInput = {
    department_name: string
  }

  export type DepartmentUncheckedCreateWithoutCompanyInput = {
    department_id?: number
    department_name: string
  }

  export type DepartmentCreateOrConnectWithoutCompanyInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput>
  }

  export type DepartmentCreateManyCompanyInputEnvelope = {
    data: DepartmentCreateManyCompanyInput | DepartmentCreateManyCompanyInput[]
  }

  export type EmployeeCreateWithoutCompanyInput = {
    employee_id: string
    lastName: string
    firstName: string
    middleName?: string | null
    start_train_date: Date | string
    start_income_date: Date | string
    start_10k_date: Date | string
    worker_type: string
    wage_rate: number
    rate_type: string
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    payroll_temps?: PayrollTempCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutCompanyInput = {
    employee_id: string
    lastName: string
    firstName: string
    middleName?: string | null
    start_train_date: Date | string
    start_income_date: Date | string
    start_10k_date: Date | string
    worker_type: string
    wage_rate: number
    rate_type: string
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    payroll_temps?: PayrollTempUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutCompanyInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput>
  }

  export type EmployeeCreateManyCompanyInputEnvelope = {
    data: EmployeeCreateManyCompanyInput | EmployeeCreateManyCompanyInput[]
  }

  export type DepartmentUpsertWithWhereUniqueWithoutCompanyInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutCompanyInput, DepartmentUncheckedUpdateWithoutCompanyInput>
    create: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutCompanyInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutCompanyInput, DepartmentUncheckedUpdateWithoutCompanyInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutCompanyInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutCompanyInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    department_id?: IntFilter<"Department"> | number
    department_name?: StringFilter<"Department"> | string
    company_id?: IntFilter<"Department"> | number
  }

  export type EmployeeUpsertWithWhereUniqueWithoutCompanyInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutCompanyInput, EmployeeUncheckedUpdateWithoutCompanyInput>
    create: XOR<EmployeeCreateWithoutCompanyInput, EmployeeUncheckedCreateWithoutCompanyInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutCompanyInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutCompanyInput, EmployeeUncheckedUpdateWithoutCompanyInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutCompanyInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutCompanyInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    OR?: EmployeeScalarWhereInput[]
    NOT?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    employee_id?: StringFilter<"Employee"> | string
    lastName?: StringFilter<"Employee"> | string
    firstName?: StringFilter<"Employee"> | string
    middleName?: StringNullableFilter<"Employee"> | string | null
    company_id?: IntNullableFilter<"Employee"> | number | null
    start_train_date?: DateTimeFilter<"Employee"> | Date | string
    start_income_date?: DateTimeFilter<"Employee"> | Date | string
    start_10k_date?: DateTimeFilter<"Employee"> | Date | string
    worker_type?: StringFilter<"Employee"> | string
    wage_rate?: FloatFilter<"Employee"> | number
    rate_type?: StringFilter<"Employee"> | string
  }

  export type CompanyCreateWithoutDepartmentsInput = {
    company_name: string
    employees?: EmployeeCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutDepartmentsInput = {
    company_id?: number
    company_name: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutDepartmentsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutDepartmentsInput, CompanyUncheckedCreateWithoutDepartmentsInput>
  }

  export type CompanyUpsertWithoutDepartmentsInput = {
    update: XOR<CompanyUpdateWithoutDepartmentsInput, CompanyUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<CompanyCreateWithoutDepartmentsInput, CompanyUncheckedCreateWithoutDepartmentsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutDepartmentsInput, CompanyUncheckedUpdateWithoutDepartmentsInput>
  }

  export type CompanyUpdateWithoutDepartmentsInput = {
    company_name?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutDepartmentsInput = {
    company_id?: IntFieldUpdateOperationsInput | number
    company_name?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutEmployeesInput = {
    company_name: string
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutEmployeesInput = {
    company_id?: number
    company_name: string
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutEmployeesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
  }

  export type LeaveCreateWithoutEmployeeInput = {
    start_leave?: Date | string | null
    end_leave?: Date | string | null
    total_days?: number | null
  }

  export type LeaveUncheckedCreateWithoutEmployeeInput = {
    leave_id?: number
    start_leave?: Date | string | null
    end_leave?: Date | string | null
    total_days?: number | null
  }

  export type LeaveCreateOrConnectWithoutEmployeeInput = {
    where: LeaveWhereUniqueInput
    create: XOR<LeaveCreateWithoutEmployeeInput, LeaveUncheckedCreateWithoutEmployeeInput>
  }

  export type LeaveCreateManyEmployeeInputEnvelope = {
    data: LeaveCreateManyEmployeeInput | LeaveCreateManyEmployeeInput[]
  }

  export type PayrollCreateWithoutEmployeeInput = {
    payroll_range: Date | string
    payroll_date: Date | string
    payamounts?: PayrollAmountCreateNestedManyWithoutPayrollInput
  }

  export type PayrollUncheckedCreateWithoutEmployeeInput = {
    payroll_id?: number
    payroll_range: Date | string
    payroll_date: Date | string
    payamounts?: PayrollAmountUncheckedCreateNestedManyWithoutPayrollInput
  }

  export type PayrollCreateOrConnectWithoutEmployeeInput = {
    where: PayrollWhereUniqueInput
    create: XOR<PayrollCreateWithoutEmployeeInput, PayrollUncheckedCreateWithoutEmployeeInput>
  }

  export type PayrollCreateManyEmployeeInputEnvelope = {
    data: PayrollCreateManyEmployeeInput | PayrollCreateManyEmployeeInput[]
  }

  export type PayrollTempCreateWithoutEmployeeInput = {
    payroll_range: Date | string
    payroll_date: Date | string
    payamounts?: PayrollAmountTempCreateNestedManyWithoutPayroll_tempInput
  }

  export type PayrollTempUncheckedCreateWithoutEmployeeInput = {
    payroll_id?: number
    payroll_range: Date | string
    payroll_date: Date | string
    payamounts?: PayrollAmountTempUncheckedCreateNestedManyWithoutPayroll_tempInput
  }

  export type PayrollTempCreateOrConnectWithoutEmployeeInput = {
    where: PayrollTempWhereUniqueInput
    create: XOR<PayrollTempCreateWithoutEmployeeInput, PayrollTempUncheckedCreateWithoutEmployeeInput>
  }

  export type PayrollTempCreateManyEmployeeInputEnvelope = {
    data: PayrollTempCreateManyEmployeeInput | PayrollTempCreateManyEmployeeInput[]
  }

  export type CompanyUpsertWithoutEmployeesInput = {
    update: XOR<CompanyUpdateWithoutEmployeesInput, CompanyUncheckedUpdateWithoutEmployeesInput>
    create: XOR<CompanyCreateWithoutEmployeesInput, CompanyUncheckedCreateWithoutEmployeesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutEmployeesInput, CompanyUncheckedUpdateWithoutEmployeesInput>
  }

  export type CompanyUpdateWithoutEmployeesInput = {
    company_name?: StringFieldUpdateOperationsInput | string
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutEmployeesInput = {
    company_id?: IntFieldUpdateOperationsInput | number
    company_name?: StringFieldUpdateOperationsInput | string
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type LeaveUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: LeaveWhereUniqueInput
    update: XOR<LeaveUpdateWithoutEmployeeInput, LeaveUncheckedUpdateWithoutEmployeeInput>
    create: XOR<LeaveCreateWithoutEmployeeInput, LeaveUncheckedCreateWithoutEmployeeInput>
  }

  export type LeaveUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: LeaveWhereUniqueInput
    data: XOR<LeaveUpdateWithoutEmployeeInput, LeaveUncheckedUpdateWithoutEmployeeInput>
  }

  export type LeaveUpdateManyWithWhereWithoutEmployeeInput = {
    where: LeaveScalarWhereInput
    data: XOR<LeaveUpdateManyMutationInput, LeaveUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type LeaveScalarWhereInput = {
    AND?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
    OR?: LeaveScalarWhereInput[]
    NOT?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
    leave_id?: IntFilter<"Leave"> | number
    employee_id?: StringFilter<"Leave"> | string
    start_leave?: DateTimeNullableFilter<"Leave"> | Date | string | null
    end_leave?: DateTimeNullableFilter<"Leave"> | Date | string | null
    total_days?: IntNullableFilter<"Leave"> | number | null
  }

  export type PayrollUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: PayrollWhereUniqueInput
    update: XOR<PayrollUpdateWithoutEmployeeInput, PayrollUncheckedUpdateWithoutEmployeeInput>
    create: XOR<PayrollCreateWithoutEmployeeInput, PayrollUncheckedCreateWithoutEmployeeInput>
  }

  export type PayrollUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: PayrollWhereUniqueInput
    data: XOR<PayrollUpdateWithoutEmployeeInput, PayrollUncheckedUpdateWithoutEmployeeInput>
  }

  export type PayrollUpdateManyWithWhereWithoutEmployeeInput = {
    where: PayrollScalarWhereInput
    data: XOR<PayrollUpdateManyMutationInput, PayrollUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type PayrollScalarWhereInput = {
    AND?: PayrollScalarWhereInput | PayrollScalarWhereInput[]
    OR?: PayrollScalarWhereInput[]
    NOT?: PayrollScalarWhereInput | PayrollScalarWhereInput[]
    payroll_id?: IntFilter<"Payroll"> | number
    employee_id?: StringFilter<"Payroll"> | string
    payroll_range?: DateTimeFilter<"Payroll"> | Date | string
    payroll_date?: DateTimeFilter<"Payroll"> | Date | string
  }

  export type PayrollTempUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: PayrollTempWhereUniqueInput
    update: XOR<PayrollTempUpdateWithoutEmployeeInput, PayrollTempUncheckedUpdateWithoutEmployeeInput>
    create: XOR<PayrollTempCreateWithoutEmployeeInput, PayrollTempUncheckedCreateWithoutEmployeeInput>
  }

  export type PayrollTempUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: PayrollTempWhereUniqueInput
    data: XOR<PayrollTempUpdateWithoutEmployeeInput, PayrollTempUncheckedUpdateWithoutEmployeeInput>
  }

  export type PayrollTempUpdateManyWithWhereWithoutEmployeeInput = {
    where: PayrollTempScalarWhereInput
    data: XOR<PayrollTempUpdateManyMutationInput, PayrollTempUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type PayrollTempScalarWhereInput = {
    AND?: PayrollTempScalarWhereInput | PayrollTempScalarWhereInput[]
    OR?: PayrollTempScalarWhereInput[]
    NOT?: PayrollTempScalarWhereInput | PayrollTempScalarWhereInput[]
    payroll_id?: IntFilter<"PayrollTemp"> | number
    employee_id?: StringFilter<"PayrollTemp"> | string
    payroll_range?: DateTimeFilter<"PayrollTemp"> | Date | string
    payroll_date?: DateTimeFilter<"PayrollTemp"> | Date | string
  }

  export type EmployeeCreateWithoutLeavesInput = {
    employee_id: string
    lastName: string
    firstName: string
    middleName?: string | null
    start_train_date: Date | string
    start_income_date: Date | string
    start_10k_date: Date | string
    worker_type: string
    wage_rate: number
    rate_type: string
    company?: CompanyCreateNestedOneWithoutEmployeesInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
    payroll_temps?: PayrollTempCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutLeavesInput = {
    employee_id: string
    lastName: string
    firstName: string
    middleName?: string | null
    company_id?: number | null
    start_train_date: Date | string
    start_income_date: Date | string
    start_10k_date: Date | string
    worker_type: string
    wage_rate: number
    rate_type: string
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
    payroll_temps?: PayrollTempUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutLeavesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutLeavesInput, EmployeeUncheckedCreateWithoutLeavesInput>
  }

  export type EmployeeUpsertWithoutLeavesInput = {
    update: XOR<EmployeeUpdateWithoutLeavesInput, EmployeeUncheckedUpdateWithoutLeavesInput>
    create: XOR<EmployeeCreateWithoutLeavesInput, EmployeeUncheckedCreateWithoutLeavesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutLeavesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutLeavesInput, EmployeeUncheckedUpdateWithoutLeavesInput>
  }

  export type EmployeeUpdateWithoutLeavesInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    start_train_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_income_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_10k_date?: DateTimeFieldUpdateOperationsInput | Date | string
    worker_type?: StringFieldUpdateOperationsInput | string
    wage_rate?: FloatFieldUpdateOperationsInput | number
    rate_type?: StringFieldUpdateOperationsInput | string
    company?: CompanyUpdateOneWithoutEmployeesNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    payroll_temps?: PayrollTempUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutLeavesInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_train_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_income_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_10k_date?: DateTimeFieldUpdateOperationsInput | Date | string
    worker_type?: StringFieldUpdateOperationsInput | string
    wage_rate?: FloatFieldUpdateOperationsInput | number
    rate_type?: StringFieldUpdateOperationsInput | string
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    payroll_temps?: PayrollTempUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutPayrollsInput = {
    employee_id: string
    lastName: string
    firstName: string
    middleName?: string | null
    start_train_date: Date | string
    start_income_date: Date | string
    start_10k_date: Date | string
    worker_type: string
    wage_rate: number
    rate_type: string
    company?: CompanyCreateNestedOneWithoutEmployeesInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    payroll_temps?: PayrollTempCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutPayrollsInput = {
    employee_id: string
    lastName: string
    firstName: string
    middleName?: string | null
    company_id?: number | null
    start_train_date: Date | string
    start_income_date: Date | string
    start_10k_date: Date | string
    worker_type: string
    wage_rate: number
    rate_type: string
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    payroll_temps?: PayrollTempUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutPayrollsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPayrollsInput, EmployeeUncheckedCreateWithoutPayrollsInput>
  }

  export type PayrollAmountCreateWithoutPayrollInput = {
    gross_amount: number
    work_share?: number | null
    conversion_rate?: number | null
  }

  export type PayrollAmountUncheckedCreateWithoutPayrollInput = {
    payamount_id?: number
    gross_amount: number
    work_share?: number | null
    conversion_rate?: number | null
  }

  export type PayrollAmountCreateOrConnectWithoutPayrollInput = {
    where: PayrollAmountWhereUniqueInput
    create: XOR<PayrollAmountCreateWithoutPayrollInput, PayrollAmountUncheckedCreateWithoutPayrollInput>
  }

  export type PayrollAmountCreateManyPayrollInputEnvelope = {
    data: PayrollAmountCreateManyPayrollInput | PayrollAmountCreateManyPayrollInput[]
  }

  export type EmployeeUpsertWithoutPayrollsInput = {
    update: XOR<EmployeeUpdateWithoutPayrollsInput, EmployeeUncheckedUpdateWithoutPayrollsInput>
    create: XOR<EmployeeCreateWithoutPayrollsInput, EmployeeUncheckedCreateWithoutPayrollsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutPayrollsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutPayrollsInput, EmployeeUncheckedUpdateWithoutPayrollsInput>
  }

  export type EmployeeUpdateWithoutPayrollsInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    start_train_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_income_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_10k_date?: DateTimeFieldUpdateOperationsInput | Date | string
    worker_type?: StringFieldUpdateOperationsInput | string
    wage_rate?: FloatFieldUpdateOperationsInput | number
    rate_type?: StringFieldUpdateOperationsInput | string
    company?: CompanyUpdateOneWithoutEmployeesNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    payroll_temps?: PayrollTempUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutPayrollsInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_train_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_income_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_10k_date?: DateTimeFieldUpdateOperationsInput | Date | string
    worker_type?: StringFieldUpdateOperationsInput | string
    wage_rate?: FloatFieldUpdateOperationsInput | number
    rate_type?: StringFieldUpdateOperationsInput | string
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    payroll_temps?: PayrollTempUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type PayrollAmountUpsertWithWhereUniqueWithoutPayrollInput = {
    where: PayrollAmountWhereUniqueInput
    update: XOR<PayrollAmountUpdateWithoutPayrollInput, PayrollAmountUncheckedUpdateWithoutPayrollInput>
    create: XOR<PayrollAmountCreateWithoutPayrollInput, PayrollAmountUncheckedCreateWithoutPayrollInput>
  }

  export type PayrollAmountUpdateWithWhereUniqueWithoutPayrollInput = {
    where: PayrollAmountWhereUniqueInput
    data: XOR<PayrollAmountUpdateWithoutPayrollInput, PayrollAmountUncheckedUpdateWithoutPayrollInput>
  }

  export type PayrollAmountUpdateManyWithWhereWithoutPayrollInput = {
    where: PayrollAmountScalarWhereInput
    data: XOR<PayrollAmountUpdateManyMutationInput, PayrollAmountUncheckedUpdateManyWithoutPayrollInput>
  }

  export type PayrollAmountScalarWhereInput = {
    AND?: PayrollAmountScalarWhereInput | PayrollAmountScalarWhereInput[]
    OR?: PayrollAmountScalarWhereInput[]
    NOT?: PayrollAmountScalarWhereInput | PayrollAmountScalarWhereInput[]
    payamount_id?: IntFilter<"PayrollAmount"> | number
    payroll_id?: IntFilter<"PayrollAmount"> | number
    gross_amount?: FloatFilter<"PayrollAmount"> | number
    work_share?: FloatNullableFilter<"PayrollAmount"> | number | null
    conversion_rate?: FloatNullableFilter<"PayrollAmount"> | number | null
  }

  export type PayrollCreateWithoutPayamountsInput = {
    payroll_range: Date | string
    payroll_date: Date | string
    employee: EmployeeCreateNestedOneWithoutPayrollsInput
  }

  export type PayrollUncheckedCreateWithoutPayamountsInput = {
    payroll_id?: number
    employee_id: string
    payroll_range: Date | string
    payroll_date: Date | string
  }

  export type PayrollCreateOrConnectWithoutPayamountsInput = {
    where: PayrollWhereUniqueInput
    create: XOR<PayrollCreateWithoutPayamountsInput, PayrollUncheckedCreateWithoutPayamountsInput>
  }

  export type PayrollUpsertWithoutPayamountsInput = {
    update: XOR<PayrollUpdateWithoutPayamountsInput, PayrollUncheckedUpdateWithoutPayamountsInput>
    create: XOR<PayrollCreateWithoutPayamountsInput, PayrollUncheckedCreateWithoutPayamountsInput>
    where?: PayrollWhereInput
  }

  export type PayrollUpdateToOneWithWhereWithoutPayamountsInput = {
    where?: PayrollWhereInput
    data: XOR<PayrollUpdateWithoutPayamountsInput, PayrollUncheckedUpdateWithoutPayamountsInput>
  }

  export type PayrollUpdateWithoutPayamountsInput = {
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPayrollsNestedInput
  }

  export type PayrollUncheckedUpdateWithoutPayamountsInput = {
    payroll_id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateWithoutPayroll_tempsInput = {
    employee_id: string
    lastName: string
    firstName: string
    middleName?: string | null
    start_train_date: Date | string
    start_income_date: Date | string
    start_10k_date: Date | string
    worker_type: string
    wage_rate: number
    rate_type: string
    company?: CompanyCreateNestedOneWithoutEmployeesInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutPayroll_tempsInput = {
    employee_id: string
    lastName: string
    firstName: string
    middleName?: string | null
    company_id?: number | null
    start_train_date: Date | string
    start_income_date: Date | string
    start_10k_date: Date | string
    worker_type: string
    wage_rate: number
    rate_type: string
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: PayrollUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutPayroll_tempsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPayroll_tempsInput, EmployeeUncheckedCreateWithoutPayroll_tempsInput>
  }

  export type PayrollAmountTempCreateWithoutPayroll_tempInput = {
    gross_amount: number
    work_share?: number | null
    conversion_rate?: number | null
  }

  export type PayrollAmountTempUncheckedCreateWithoutPayroll_tempInput = {
    payamount_id?: number
    gross_amount: number
    work_share?: number | null
    conversion_rate?: number | null
  }

  export type PayrollAmountTempCreateOrConnectWithoutPayroll_tempInput = {
    where: PayrollAmountTempWhereUniqueInput
    create: XOR<PayrollAmountTempCreateWithoutPayroll_tempInput, PayrollAmountTempUncheckedCreateWithoutPayroll_tempInput>
  }

  export type PayrollAmountTempCreateManyPayroll_tempInputEnvelope = {
    data: PayrollAmountTempCreateManyPayroll_tempInput | PayrollAmountTempCreateManyPayroll_tempInput[]
  }

  export type EmployeeUpsertWithoutPayroll_tempsInput = {
    update: XOR<EmployeeUpdateWithoutPayroll_tempsInput, EmployeeUncheckedUpdateWithoutPayroll_tempsInput>
    create: XOR<EmployeeCreateWithoutPayroll_tempsInput, EmployeeUncheckedCreateWithoutPayroll_tempsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutPayroll_tempsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutPayroll_tempsInput, EmployeeUncheckedUpdateWithoutPayroll_tempsInput>
  }

  export type EmployeeUpdateWithoutPayroll_tempsInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    start_train_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_income_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_10k_date?: DateTimeFieldUpdateOperationsInput | Date | string
    worker_type?: StringFieldUpdateOperationsInput | string
    wage_rate?: FloatFieldUpdateOperationsInput | number
    rate_type?: StringFieldUpdateOperationsInput | string
    company?: CompanyUpdateOneWithoutEmployeesNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutPayroll_tempsInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_train_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_income_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_10k_date?: DateTimeFieldUpdateOperationsInput | Date | string
    worker_type?: StringFieldUpdateOperationsInput | string
    wage_rate?: FloatFieldUpdateOperationsInput | number
    rate_type?: StringFieldUpdateOperationsInput | string
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type PayrollAmountTempUpsertWithWhereUniqueWithoutPayroll_tempInput = {
    where: PayrollAmountTempWhereUniqueInput
    update: XOR<PayrollAmountTempUpdateWithoutPayroll_tempInput, PayrollAmountTempUncheckedUpdateWithoutPayroll_tempInput>
    create: XOR<PayrollAmountTempCreateWithoutPayroll_tempInput, PayrollAmountTempUncheckedCreateWithoutPayroll_tempInput>
  }

  export type PayrollAmountTempUpdateWithWhereUniqueWithoutPayroll_tempInput = {
    where: PayrollAmountTempWhereUniqueInput
    data: XOR<PayrollAmountTempUpdateWithoutPayroll_tempInput, PayrollAmountTempUncheckedUpdateWithoutPayroll_tempInput>
  }

  export type PayrollAmountTempUpdateManyWithWhereWithoutPayroll_tempInput = {
    where: PayrollAmountTempScalarWhereInput
    data: XOR<PayrollAmountTempUpdateManyMutationInput, PayrollAmountTempUncheckedUpdateManyWithoutPayroll_tempInput>
  }

  export type PayrollAmountTempScalarWhereInput = {
    AND?: PayrollAmountTempScalarWhereInput | PayrollAmountTempScalarWhereInput[]
    OR?: PayrollAmountTempScalarWhereInput[]
    NOT?: PayrollAmountTempScalarWhereInput | PayrollAmountTempScalarWhereInput[]
    payamount_id?: IntFilter<"PayrollAmountTemp"> | number
    payroll_id?: IntFilter<"PayrollAmountTemp"> | number
    gross_amount?: FloatFilter<"PayrollAmountTemp"> | number
    work_share?: FloatNullableFilter<"PayrollAmountTemp"> | number | null
    conversion_rate?: FloatNullableFilter<"PayrollAmountTemp"> | number | null
  }

  export type PayrollTempCreateWithoutPayamountsInput = {
    payroll_range: Date | string
    payroll_date: Date | string
    employee: EmployeeCreateNestedOneWithoutPayroll_tempsInput
  }

  export type PayrollTempUncheckedCreateWithoutPayamountsInput = {
    payroll_id?: number
    employee_id: string
    payroll_range: Date | string
    payroll_date: Date | string
  }

  export type PayrollTempCreateOrConnectWithoutPayamountsInput = {
    where: PayrollTempWhereUniqueInput
    create: XOR<PayrollTempCreateWithoutPayamountsInput, PayrollTempUncheckedCreateWithoutPayamountsInput>
  }

  export type PayrollTempUpsertWithoutPayamountsInput = {
    update: XOR<PayrollTempUpdateWithoutPayamountsInput, PayrollTempUncheckedUpdateWithoutPayamountsInput>
    create: XOR<PayrollTempCreateWithoutPayamountsInput, PayrollTempUncheckedCreateWithoutPayamountsInput>
    where?: PayrollTempWhereInput
  }

  export type PayrollTempUpdateToOneWithWhereWithoutPayamountsInput = {
    where?: PayrollTempWhereInput
    data: XOR<PayrollTempUpdateWithoutPayamountsInput, PayrollTempUncheckedUpdateWithoutPayamountsInput>
  }

  export type PayrollTempUpdateWithoutPayamountsInput = {
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPayroll_tempsNestedInput
  }

  export type PayrollTempUncheckedUpdateWithoutPayamountsInput = {
    payroll_id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentCreateManyCompanyInput = {
    department_id?: number
    department_name: string
  }

  export type EmployeeCreateManyCompanyInput = {
    employee_id: string
    lastName: string
    firstName: string
    middleName?: string | null
    start_train_date: Date | string
    start_income_date: Date | string
    start_10k_date: Date | string
    worker_type: string
    wage_rate: number
    rate_type: string
  }

  export type DepartmentUpdateWithoutCompanyInput = {
    department_name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUncheckedUpdateWithoutCompanyInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUncheckedUpdateManyWithoutCompanyInput = {
    department_id?: IntFieldUpdateOperationsInput | number
    department_name?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeUpdateWithoutCompanyInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    start_train_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_income_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_10k_date?: DateTimeFieldUpdateOperationsInput | Date | string
    worker_type?: StringFieldUpdateOperationsInput | string
    wage_rate?: FloatFieldUpdateOperationsInput | number
    rate_type?: StringFieldUpdateOperationsInput | string
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUpdateManyWithoutEmployeeNestedInput
    payroll_temps?: PayrollTempUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCompanyInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    start_train_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_income_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_10k_date?: DateTimeFieldUpdateOperationsInput | Date | string
    worker_type?: StringFieldUpdateOperationsInput | string
    wage_rate?: FloatFieldUpdateOperationsInput | number
    rate_type?: StringFieldUpdateOperationsInput | string
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: PayrollUncheckedUpdateManyWithoutEmployeeNestedInput
    payroll_temps?: PayrollTempUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutCompanyInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    start_train_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_income_date?: DateTimeFieldUpdateOperationsInput | Date | string
    start_10k_date?: DateTimeFieldUpdateOperationsInput | Date | string
    worker_type?: StringFieldUpdateOperationsInput | string
    wage_rate?: FloatFieldUpdateOperationsInput | number
    rate_type?: StringFieldUpdateOperationsInput | string
  }

  export type LeaveCreateManyEmployeeInput = {
    leave_id?: number
    start_leave?: Date | string | null
    end_leave?: Date | string | null
    total_days?: number | null
  }

  export type PayrollCreateManyEmployeeInput = {
    payroll_id?: number
    payroll_range: Date | string
    payroll_date: Date | string
  }

  export type PayrollTempCreateManyEmployeeInput = {
    payroll_id?: number
    payroll_range: Date | string
    payroll_date: Date | string
  }

  export type LeaveUpdateWithoutEmployeeInput = {
    start_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_days?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LeaveUncheckedUpdateWithoutEmployeeInput = {
    leave_id?: IntFieldUpdateOperationsInput | number
    start_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_days?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LeaveUncheckedUpdateManyWithoutEmployeeInput = {
    leave_id?: IntFieldUpdateOperationsInput | number
    start_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_leave?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_days?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PayrollUpdateWithoutEmployeeInput = {
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payamounts?: PayrollAmountUpdateManyWithoutPayrollNestedInput
  }

  export type PayrollUncheckedUpdateWithoutEmployeeInput = {
    payroll_id?: IntFieldUpdateOperationsInput | number
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payamounts?: PayrollAmountUncheckedUpdateManyWithoutPayrollNestedInput
  }

  export type PayrollUncheckedUpdateManyWithoutEmployeeInput = {
    payroll_id?: IntFieldUpdateOperationsInput | number
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollTempUpdateWithoutEmployeeInput = {
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payamounts?: PayrollAmountTempUpdateManyWithoutPayroll_tempNestedInput
  }

  export type PayrollTempUncheckedUpdateWithoutEmployeeInput = {
    payroll_id?: IntFieldUpdateOperationsInput | number
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payamounts?: PayrollAmountTempUncheckedUpdateManyWithoutPayroll_tempNestedInput
  }

  export type PayrollTempUncheckedUpdateManyWithoutEmployeeInput = {
    payroll_id?: IntFieldUpdateOperationsInput | number
    payroll_range?: DateTimeFieldUpdateOperationsInput | Date | string
    payroll_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollAmountCreateManyPayrollInput = {
    payamount_id?: number
    gross_amount: number
    work_share?: number | null
    conversion_rate?: number | null
  }

  export type PayrollAmountUpdateWithoutPayrollInput = {
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PayrollAmountUncheckedUpdateWithoutPayrollInput = {
    payamount_id?: IntFieldUpdateOperationsInput | number
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PayrollAmountUncheckedUpdateManyWithoutPayrollInput = {
    payamount_id?: IntFieldUpdateOperationsInput | number
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PayrollAmountTempCreateManyPayroll_tempInput = {
    payamount_id?: number
    gross_amount: number
    work_share?: number | null
    conversion_rate?: number | null
  }

  export type PayrollAmountTempUpdateWithoutPayroll_tempInput = {
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PayrollAmountTempUncheckedUpdateWithoutPayroll_tempInput = {
    payamount_id?: IntFieldUpdateOperationsInput | number
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PayrollAmountTempUncheckedUpdateManyWithoutPayroll_tempInput = {
    payamount_id?: IntFieldUpdateOperationsInput | number
    gross_amount?: FloatFieldUpdateOperationsInput | number
    work_share?: NullableFloatFieldUpdateOperationsInput | number | null
    conversion_rate?: NullableFloatFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeCountOutputTypeDefaultArgs instead
     */
    export type EmployeeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PayrollCountOutputTypeDefaultArgs instead
     */
    export type PayrollCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PayrollCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PayrollTempCountOutputTypeDefaultArgs instead
     */
    export type PayrollTempCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PayrollTempCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentDefaultArgs instead
     */
    export type DepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeDefaultArgs instead
     */
    export type EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeaveDefaultArgs instead
     */
    export type LeaveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeaveDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PayrollDefaultArgs instead
     */
    export type PayrollArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PayrollDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PayrollAmountDefaultArgs instead
     */
    export type PayrollAmountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PayrollAmountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PayrollTempDefaultArgs instead
     */
    export type PayrollTempArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PayrollTempDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PayrollAmountTempDefaultArgs instead
     */
    export type PayrollAmountTempArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PayrollAmountTempDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}